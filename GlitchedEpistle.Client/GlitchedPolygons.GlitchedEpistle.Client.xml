<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlitchedPolygons.GlitchedEpistle.Client</name>
    </assembly>
    <members>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Constants.URLs">
            <summary>
            Class containing important <see langword="const"/> URLs.
            </summary>
        </member>
        <member name="F:GlitchedPolygons.GlitchedEpistle.Client.Constants.URLs.EPISTLE">
            <summary>
            The Glitched Epistle base URL.
            </summary>
        </member>
        <member name="F:GlitchedPolygons.GlitchedEpistle.Client.Constants.URLs.EPISTLE_API">
            <summary>
            The Glitched Epistle Web API base URL.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DirectoryInfoExtensions">
            <summary>
            Class that holds <see cref="T:System.IO.DirectoryInfo"/> extension methods.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DirectoryInfoExtensions.DeleteRecursively(System.IO.DirectoryInfo)">
            <summary>
            Deletes the specified directory recursively,
            including all of its sub-directories and files.
            </summary>
            <param name="dir">The directory to delete.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions">
            <summary>
            Class holding <see cref="T:System.Security.Cryptography.RSAParameters"/> extension methods.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions.FromXml(System.String)">
            <summary>
            Deserializes an <see cref="T:System.Security.Cryptography.RSAParameters"/> instance from an xml <c>string</c>.
            </summary>
            <param name="xml">The XML containing the <see cref="T:System.Security.Cryptography.RSAParameters"/>.</param>
            <returns><see cref="T:System.Security.Cryptography.RSAParameters"/>.</returns>
            <exception cref="T:System.IO.InvalidDataException">Invalid XML RSA key.</exception>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions.ToXmlString(System.Security.Cryptography.RSAParameters)">
            <summary>
            Converts <see cref="T:System.Security.Cryptography.RSAParameters"/> to xml.
            </summary>
            <param name="parameters">The key to convert to xml.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions">
            <summary>
            <see cref="T:System.String"/> extensions.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.MD5(System.String,System.Boolean)">
            <summary>
            Computes the MD5 hash of a <c>string</c>.
            </summary>
            <param name="text">The text to hash.</param>
            <param name="toLowercase">Should the output hash be lowercased?</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.SHA512(System.String,System.Boolean)">
            <summary>
            Computes the SHA512 hash of a <c>string</c>.
            </summary>
            <param name="text">The text to hash.</param>
            <param name="toLowercase">Should the output hash <c>string</c> be lowercased?.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.EncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes a <c>string</c> to bytes (a <c>byte[]</c> array).
            </summary>
            <param name="text">The text to encode.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the conversion (default is UTF8).</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo">
            <summary>
            A highly civilized conversation between two or more homo sapiens.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Id">
            <summary>
            Unique identifier for the convo.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.CreatorId">
            <summary>
            User ID of the conversation's creator.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Name">
            <summary>
            The conversation's name.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Description">
            <summary>
            A short description of what the convo is about.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.PasswordSHA512">
            <summary>
            The convo's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.CreationTimestamp">
            <summary>
            The <see cref="T:System.DateTime"/> (UTC) this conversation was created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Expires">
            <summary>
            The exact UTC <see cref="T:System.DateTime"/> when the convo will expire.<para> </para>
            After this moment in time, no further messages can be posted to the convo
            and the conversation itself will be deleted 48h afterwards.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Participants">
            <summary>
            The people who joined the convo (their user ids).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.BannedUsers">
            <summary>
            A list of all the perma-banned users.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Messages">
            <summary>
            The conversation's messages.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto">
            <summary>
            Data-transfer object for the creation of a new <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto.Name">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> name (title).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto.Description">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> description (e.g. what is the convo about?).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto.PasswordSHA512">
            <summary>
            The convo's access password SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto.Expires">
            <summary>
            The conversation's expiration date (in UTC).
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto">
            <summary>
            Data transfer object class for a conversation's metadata (like e.g. the name, description, etc...).
            Does not contain sensitive information such as passwords, etc...
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Id">
            <summary>
            Unique <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> identifier.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.CreatorId">
            <summary>
            The creator user identifier.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Name">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> name/title.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Description">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s description text.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.CreationTimestamp">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s creation timestamp (UTC).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Expires">
            <summary>
            Convo expiration <see cref="T:System.DateTime"/> (UTC).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Participants">
            <summary>
            The convo's participants (user ids separated by a comma: ',').
            </summary>
            <value>The participants.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.BannedUsers">
            <summary>
            The convo's banned users (their user id), separated by a comma: ','.
            </summary>
            <value>The banned users.</value>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto">
            <summary>
            DTO for the message post request parameters (request body).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.ConvoPasswordHash">
            <summary>
            The conversation's access pw.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.UserId">
            <summary>
            The message author's user id.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.Auth">
            <summary>
            The message author's request authentication token.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.SenderName">
            <summary>
            The message author's username (to display).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.MessageBodiesJson">
            <summary>
            The message's encrypted bodies (packed into json key-value pairs).
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationDto">
            <summary>
            DTO for creating a new <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationDto.PasswordHash">
            <summary>
            The user's desired password SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationDto.PublicKeyXml">
            <summary>
            The user's public RSA key (in xml format). This is needed to encrypt messages for this user.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationDto.CreationSecret">
            <summary>
            The server creation secret <c>string</c>.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message">
            <summary>
            An epistle message.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderId">
            <summary>
            The sender's ID.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderName">
            <summary>
            The sender's display username.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Timestamp">
            <summary>
            The message's timestamp in UTC.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Body">
            <summary>
            This is the message body - a json string that's been encrypted specifically for its recipient user (using that user's public RSA key).
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User">
            <summary>
            The class that represents the epistle user.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Id">
            <summary>
            The user's unique identifier (the primary key for the epistle db).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Role">
            <summary>
            The user's role. 
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PasswordSHA512">
            <summary>
            The user's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Token">
            <summary>
            The token needed to authenticate Web API requests.<para> </para>
            <see cref="P:System.Tuple`2.Item1"/> is the token's UTC timestamp (when it was emitted).<para> </para>
            <see cref="P:System.Tuple`2.Item2"/> is the token <see langword="string"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.CreationTimestamp">
            <summary>
            The <see cref="T:System.DateTime"/> when this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> was first created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.ExpirationUTC">
            <summary>
            The exact <see cref="T:System.DateTime"/> (UTC) this user's access to Epistle expires.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PrivateKey">
            <summary>
            The user's private message encryption RSA key.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PublicKey">
            <summary>
            The user's public message encryption RSA key.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PublicKeyXml">
            <summary>
            The user's public message encryption RSA key (XML-formatted, using preferably <see cref="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)"/>).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.LoginFailures">
            <summary>
            How many failed login attempts this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> has on his record.
            After too many, he is locked out for a while.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.User.IsExpired">
            <summary>
            Checks whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s epistle membership is expired.
            </summary>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s epistle membership is expired or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse">
            <summary>
            A <see langword="class"/> containing the HTTP response data for <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> registration.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.Id">
            <summary>
            The user's unique identifier (the primary key for the epistle db).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.PasswordSHA512">
            <summary>
            The user's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.CreationTimestamp">
            <summary>
            The <see cref="T:System.DateTime"/> when this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> was first created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.Role">
            <summary>
            The user's role. 
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.TotpSecret">
            <summary>
            The user's 2FA TOTP secret.
            </summary>
            <value>The totp secret.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.TotpEmergencyBackupCodes">
            <summary>
            The user's 2FA TOTP emergency backup codes (can only be used once).
            </summary>
            <value>The 2FA TOTP emergency backup codes.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.ExpirationUTC">
            <summary>
            The exact <see cref="T:System.DateTime"/> (UTC) this user's access to Epistle expires.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService">
            <summary>
            Service interface responsible for accessing convos on the web API (remote).
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService" /> <c>interface</c>.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.CreateConvo(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto,System.String,System.String)">
            <summary>
            Creates a new convo on the server.
            </summary>
            <param name="convoDto">The convo creation DTO.</param>
            <param name="userId">The user identifier (who's making the request).</param>
            <param name="auth">The authentication token (JWT).</param>
            <returns><c>null</c> if creation failed; the created <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />'s unique id.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.DeleteConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes a convo server-side.
            </summary>
            <param name="convoId">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />'s identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (who's making the request; needs to be the convo's admin).</param>
            <param name="auth">The authentication JWT.</param>
            <returns>Whether deletion was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.PostMessage(System.String,GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto)">
            <summary>
            Posts a message to a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="messageDto">The message post parameters (for the request body).</param>
            <returns>Whether the message was posted successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.GetConvoMetadata(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a convo's metadata (description, timestamp, etc...).
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a participant of the convo).</param>
            <param name="auth">The authentication token.</param>
            <returns>The convo's metadata wrapped into a DTO (<c>null</c> if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.GetConvoMessages(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the convo messages.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a convo participant).</param>
            <param name="auth">The request authentication token.</param>
            <param name="fromIndex">The index from which to start retrieving messages inclusively (e.g. starting from index 4 will include <c>convo.Messages[4]</c>).</param>
            <returns>The retrieved <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message" />s (<c>null</c> if everything is up to date or if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.IndexOf(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the index of a message inside a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier of who's making the request.</param>
            <param name="auth">The request authentication JWT.</param>
            <param name="messageId">The message identifier.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message" />'s index integer; if something fails, <c>-1</c> is returned.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.JoinConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Join a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The identifier of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" /> that you're trying to join.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user's identifier (who wants to join).</param>
            <param name="auth">The authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" /> was joined successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.LeaveConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Leave a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (who's leaving the convo).</param>
            <param name="auth">The request authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" /> was left successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.KickUser(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Kick a user from a conversation.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="convoAdminId">Your user id (you need to be a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />'s admin in order to kick people out of it).</param>
            <param name="auth">The request authentication token.</param>
            <param name="userIdToKick">The user id of who you're kicking out.</param>
            <param name="permaBan">If set to <c>true</c>, the kicked user won't be able to rejoin the convo permanently.</param>
            <returns>Whether the user was kicked out successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoProvider">
            <summary>
            Service interface responsible for retrieving/accessing convos (local).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoProvider.Convos">
            <summary>
            Gets all the convos currently loaded.
            </summary>
            <value>The convos.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoProvider.Item(System.String)">
            <summary>
            Gets the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> with the specified identifier.
            </summary>
            <param name="id">The <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Id"/> identifier.</param>
            <returns>The matching <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> (or <c>null</c> if the convo couldn't be found).</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService">
            <summary>
            Service interface responsible for accessing convos on the web API (remote).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.CreateConvo(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationDto,System.String,System.String)">
            <summary>
            Creates a new convo on the server.
            </summary>
            <param name="convoDto">The convo creation DTO.</param>
            <param name="userId">The user identifier (who's making the request).</param>
            <param name="auth">The authentication token (JWT).</param>
            <returns><c>null</c> if creation failed; the created <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s unique id.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.DeleteConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes a convo server-side.
            </summary>
            <param name="convoId">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (who's making the request; needs to be the convo's admin).</param>
            <param name="auth">The authentication JWT.</param>
            <returns>Whether deletion was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.PostMessage(System.String,GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto)">
            <summary>
            Posts a message to a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="messageDto">The message post parameters (for the request body).</param>
            <returns>Whether the message was posted successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.GetConvoMetadata(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a convo's metadata (description, timestamp, etc...).
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a participant of the convo).</param>
            <param name="auth">The authentication token.</param>
            <returns>The convo's metadata wrapped into a DTO (<c>null</c> if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.GetConvoMessages(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the convo messages.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a convo participant).</param>
            <param name="auth">The request authentication token.</param>
            <param name="fromIndex">The index from which to start retrieving messages inclusively (e.g. starting from index 4 will include <c>convo.Messages[4]</c>).</param>
            <returns>The retrieved <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s (<c>null</c> if everything is up to date or if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.IndexOf(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the index of a message inside a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier of who's making the request.</param>
            <param name="auth">The request authentication JWT.</param>
            <param name="messageId">The message identifier.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>'s index integer; if something fails, <c>-1</c> is returned.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.JoinConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Join a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The identifier of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> that you're trying to join.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user's identifier (who wants to join).</param>
            <param name="auth">The authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> was joined successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.LeaveConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Leave a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="userId">The user identifier (who's leaving the convo).</param>
            <param name="auth">The request authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> was left successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.KickUser(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Kick a user from a conversation.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordHash">The convo's password hash.</param>
            <param name="convoAdminId">Your user id (you need to be a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s admin in order to kick people out of it).</param>
            <param name="auth">The request authentication token.</param>
            <param name="userIdToKick">The user id of who you're kicking out.</param>
            <param name="permaBan">If set to <c>true</c>, the kicked user won't be able to rejoin the convo permanently.</param>
            <returns>Whether the user was kicked out successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.CouponService">
            <summary>
            Service class for redeeming subscription coupons.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.CouponService.UseCoupon(System.String,System.String,System.String)">
            <summary>
            Redeems a coupon code to extend a user's Epistle account membership.
            </summary>
            <param name="code">The coupon code.</param>
            <param name="userId">The user identifier to which the coupon should be applied.</param>
            <param name="auth">The jwt auth token.</param>
            <returns>Whether the coupon code was redeemed successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.ICouponService">
            <summary>
            Service interface for redeeming subscription coupons.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.ICouponService.UseCoupon(System.String,System.String,System.String)">
            <summary>
            Redeems a coupon code to extend a user's Epistle account membership.
            </summary>
            <param name="code">The coupon code.</param>
            <param name="userId">The user identifier to which the coupon should be applied.</param>
            <param name="auth">The jwt auth token.</param>
            <returns>Whether the coupon code was redeemed successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/> implementation for asymmetric RSA encryption/decryption.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Encrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts the specified text using the provided RSA public key.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="publicKey">The public key for encryption.</param>
            <returns>The encrypted <c>string</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Decrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts the specified text using the provided RSA private key.
            </summary>
            <param name="encryptedText">The encrypted text to decrypt.</param>
            <param name="privateKey">The private RSA key needed for decryption.</param>
            <returns>Decrypted <c>string</c></returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts the specified bytes using the provided RSA public key.
            </summary>
            <param name="data">The data (<c>byte[]</c>) to encrypt.</param>
            <param name="publicKey">The public key to use for encryption.</param>
            <returns>The encrypted bytes (System.Byte[]).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts the specified bytes using the provided private RSA key.
            </summary>
            <param name="encryptedData">The encrypted data bytes (<c>byte[]</c>).</param>
            <param name="privateKey">The private key to use for decryption.</param>
            <returns>Decrypted bytes (System.Byte[]) if successful.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA">
            <summary>
            Service interface for encrypting and decrypting <see langword="string"/>s and <see langword="byte"/>[] arrays.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Encrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts the specified text using the provided RSA public key.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="publicKey">The public key for encryption.</param>
            <returns>The encrypted <c>string</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Decrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts the specified text using the provided RSA private key.
            </summary>
            <param name="encryptedText">The encrypted text to decrypt.</param>
            <param name="privateKey">The private RSA key needed for decryption.</param>
            <returns>Decrypted <c>string</c></returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If only the public key is provided, the <c>string</c> cannot be decrypted.</exception>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts the specified bytes using the provided RSA public key.
            </summary>
            <param name="data">The data (<c>byte[]</c>) to encrypt.</param>
            <param name="publicKey">The public key to use for encryption.</param>
            <returns>The encrypted bytes (System.Byte[]).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts the specified bytes using the provided private RSA key.
            </summary>
            <param name="encryptedData">The encrypted data bytes (<c>byte[]</c>).</param>
            <param name="privateKey">The private key to use for decryption.</param>
            <returns>Decrypted bytes (System.Byte[]) if successful.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If only the public key is provided, the <c>byte[]</c> array cannot be decrypted.</exception>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen">
            <summary>
            Asymmetric crypto key generator.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen.GenerateKeyPair(System.String)">
            <summary>
            Generates the key pair.
            </summary>
            <param name="outputDirectory">The output directory (where the keys should be exported into).</param>
            <returns>Whether the key generation was successful or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.RSA4096Keygen">
            <summary>
            4096-bit RSA key generator.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen" />
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.RSA4096Keygen.GenerateKeyPair(System.String)">
            <summary>
            Generates a 4096-bit RSA key pair.<para> </para>
            The keys are exported into two files:
            Private.rsa.pem and Public.rsa.pem (inside the specified output directory).
            </summary>
            <param name="outputDirectory">The output directory path (where the keys will be exported).</param>
            <returns>Whether the key generation was successful or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography">
            <summary>
            Service interface for comfortably encrypting/decrypting epistle messages (usually json strings).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.EncryptMessage(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts a message json <c>string</c> for a specific recipient, whose public encryption RSA key you know (xml <c>string</c>).
            </summary>
            <param name="messageJson">The message json (<c>string</c>).</param>
            <param name="recipientPublicRsaKey">The recipient's public RSA key.</param>
            <returns>The encrypted message <c>string</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.DecryptMessage(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts a message that's been encrypted using the <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.EncryptMessage(System.String,System.Security.Cryptography.RSAParameters)"/> method.
            </summary>
            <param name="encryptedMessageJson">The encrypted message json <see langword="string"/>.</param>
            <param name="privateDecryptionRsaKey">Your private decryption RSA key.</param>
            <returns>The decrypted message json (or <see langword="null"/> if decryption failed in some way).</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography">
            <summary>
            Service interface implementation for comfortably encrypting/decrypting epistle messages (usually json strings).
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.#ctor(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography,GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA,GlitchedPolygons.Services.CompressionUtility.ICompressionUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography"/> class.
            </summary>
            <param name="aes">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography"/> instance (should be injected via IoC).</param>
            <param name="rsa">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/> instance (should be injected via IoC).</param>
            <param name="gzip">The <see cref="T:GlitchedPolygons.Services.CompressionUtility.ICompressionUtility"/> instance needed for compression (should be injected via IoC).</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.EncryptMessage(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts a message json <c>string</c> for a specific recipient, whose public encryption RSA key you know (xml <c>string</c>).
            </summary>
            <param name="messageJson">The message json (<c>string</c>) to encrypt.</param>
            <param name="recipientPublicRsaKey">The recipient's public RSA key (used for encryption).</param>
            <returns>The encrypted message <c>string</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.DecryptMessage(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts a message that's been encrypted using the <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.EncryptMessage(System.String,System.Security.Cryptography.RSAParameters)" /> method.
            </summary>
            <param name="encryptedMessage">The encrypted message <see langword="string"/> obtained via <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.EncryptMessage(System.String,System.Security.Cryptography.RSAParameters)"/>.</param>
            <param name="privateDecryptionRsaKey">Your private message decryption RSA key.</param>
            <returns>The decrypted message json (or <see langword="null" /> if decryption failed in some way).</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult">
            <summary>
            The result of encrypting some data using the <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])"/> method.
            Contains the encrypted bytes and the key + initialization vector used for the encryption (you need those for decryption).
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.Dispose">
            <summary>
            Overwrites the <see cref="F:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.key"/> and <see cref="F:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.iv"/> bytes with zeros.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography">
            <summary>
            Service interface for symmetrically encrypting/decrypting data (raw <c>byte[]</c> arrays).<para> </para>
            Please keep in mind that the data you encrypt with <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/> can only be decrypted using the same password and the corresponding mirror method <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)"/>.<para> </para>
            Likewise, data encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])"/> can only be decrypted again using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)"/> respectively.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data using a randomly generated key and initialization vector.<para> </para>
            Returns an <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> containing the encrypted <c>byte[]</c> array + the used encryption key and iv.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> containing the encrypted <c>byte[]</c> array + the used encryption key and iv.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)">
            <summary>
            Decrypts the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])"/>.
            </summary>
            <param name="encryptionResult">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])"/>.</param>
            <returns>Decrypted <c>byte[]</c> or <see langword="null"/> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)">
            <summary>
            Encrypts data using a password.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="password">The password used to derive the AES key.</param>
            <returns>The encrypted data bytes.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)">
            <summary>
            Decrypts data that was encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>.
            </summary>
            <param name="encryptedData">The encrypted data.</param>
            <param name="password">The password that was used to encrypt the data.</param>
            <returns>The decrypted <c>byte[]</c> array.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography">
            <summary>
            Service interface implementation for symmetrically encrypting/decrypting data (raw <c>byte[]</c> arrays) using <see cref="T:System.Security.Cryptography.AesManaged"/>.<para> </para>
            Please keep in mind that the data you encrypt with <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/> can only be decrypted using the same password and the corresponding mirror method <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)"/>.<para> </para>
            Likewise, data encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])"/> can only be decrypted again using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)"/> respectively.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography" /> <see langword="interface"/>.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data using a randomly generated key and initialization vector.<para></para>
            Returns an <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> containing the encrypted <c>byte[]</c> array + the used encryption key and iv.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> containing the encrypted <c>byte[]</c> array + the used encryption key and iv; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)">
            <summary>
            Decrypts the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])" />.
            </summary>
            <param name="encryptionResult">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])" />.</param>
            <returns>Decrypted <c>byte[]</c> or <see langword="null" /> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)">
            <summary>
            Encrypts data using a password.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="password">The password used to derive the AES key.</param>
            <returns>The encrypted data <c>byte[]</c> array; <c>null</c> if encryption failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)">
            <summary>
            Decrypts data that was encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>.
            </summary>
            <param name="encryptedBytes">The encrypted data that was returned by <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>.</param>
            <param name="password">The password that was used to encrypt the data.</param>
            <returns>The decrypted <c>byte[]</c> array; <c>null</c> if decryption failed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger">
            <summary>
            Service interface for logging messages to their corresponding category's log file.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogMessage(System.String)">
            <summary>
            Logs an innocent message.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogWarning(System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="msg">The warning.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogError(System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="msg">The error.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest">
            <summary>
            Service interface for testing the connection to the epistle server.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest.TestConnection">
            <summary>
            Tests the connection to the epistle server.<para> </para>
            Returns <c>true</c> if the connection could be established or <c>false</c> if the server did not respond.
            </summary>
            <returns>Whether the connection to the epistle server could be established successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.ServerConnectionTest">
            <summary>
            Class for testing the connection to the epistle server.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest" /> interface.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.ServerConnectionTest.TestConnection">
            <summary>
            Tests the connection to the epistle server.<para> </para>
            Returns <c>true</c> if the connection could be established or <c>false</c> if the server did not respond.
            </summary>
            <returns>Whether the connection to the epistle server could be established successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings">
            <summary>
            Service interface for accessing, saving and loading user settings.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Save">
            <summary>
            Saves the current user settings out to disk.
            </summary>
            <returns>Whether the settings were saved out to disk successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Load">
            <summary>
            Loads user settings from disk into the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings"/> instance.
            </summary>
            <returns>Whether the loading procedure was successful or not.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String)">
            <summary>
            Gets or sets a user setting with its specified key <see langword="string"/>.<para> </para>
            If you are trying to get an inexistent setting, <see langword="null"/> (or <c>string.Empty</c>) should be returned.<para> </para>
            If you are trying to set an inexistent setting, the setting shall be created.
            </summary>
            <param name="key">The setting's name/key.</param>
            <returns>The setting's <c>string</c> value; <see langword="null"/> (or <c>string.Empty</c>) if the setting doesn't exist.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.String)">
            <summary>
            Gets a user setting by its key <c>string</c>.
            </summary>
            <param name="key">The setting's name/key.</param>
            <param name="defaultValue">The setting's default <c>string</c> value (in case the setting doesn't exist).</param>
            <returns>The setting's <c>string</c> value; the specified default value if the setting wasn't found.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Int32)">
            <summary>
            Gets a user setting parsed as an <c>int</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>int</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>int</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Boolean)">
            <summary>
            Gets a user setting parsed as a <c>bool</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>bool</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>bool</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Single)">
            <summary>
            Gets a user setting parsed as a <c>float</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>float</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>float</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Double)">
            <summary>
            Gets a user setting parsed as a <c>double</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>double</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>double</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService">
            <summary>
            Service interface for logging into Glitched Epistle and receiving an auth token back from the Web API, as well as extending a user's expiration date.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.Login(System.String,System.String,System.String)">
            <summary>
            Logs the specified user in by authenticating the provided credentials
            (POST request to the Glitched Epistle Web API). If authentication is successful, a valid JWT is returned.
            That's needed for subsequent requests.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="passwordSHA512">The password hash (SHA-512).</param>
            <param name="totp">The 2FA code.</param>
            <returns>JWT <see langword="string"/> if auth was successful; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.RefreshAuthToken(System.String,System.String)">
            <summary>
            Refreshes the authentication token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The current authentication token.</param>
            <returns>If all goes well, you should receive your new, fresh auth token from the backend.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.Validate2FA(System.String,System.String)">
            <summary>
            Validates the 2fa token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="totp">The totp.</param>
            <returns>Whether the user 2FA authentication succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserExpirationUTC(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s expiration <see cref="T:System.DateTime"/> (in UTC).
            </summary>
            <param name="userId">The user id.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s expiration <see cref="T:System.DateTime"/> in UTC; <see langword="null"/> if the user doesn't exist.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserPublicKeyXml(System.String,System.String,System.String)">
            <summary>
            Gets one or more users' public key XML (RSA key needed for encrypting messages for that user).
            </summary>
            <param name="userId">Your user identifier.</param>
            <param name="userIds">The user ids whose public key you want to retrieve (comma-separated).</param>
            <param name="auth">The request authentication token.</param>
            <returns><c>List&lt;Tuple&lt;string, string&gt;&gt;</c> containing all of the user ids and their public key; <c>null</c> if the request failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.ChangeUserPassword(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the user password.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The authentication token.</param>
            <param name="oldPw">The old password hash (SHA-512).</param>
            <param name="newPw">The new password hash (SHA-512).</param>
            <returns><c>bool</c> indicating whether the change was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.CreateUser(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationDto)">
            <summary>
            Creates a new user.
            </summary>
            <param name="userCreationDto">DTO containing user creation parameters (for the request body).</param>
            <returns>The user creation response data containing the TOTP secret to show only ONCE to the user (won't be stored)... or <c>null</c> if the creation failed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService">
            <summary>
            Service interface for logging into Glitched Epistle and receiving an auth token back from the Web API, as well as extending a user's expiration date.<para> </para>
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService" /> interface.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.Login(System.String,System.String,System.String)">
            <summary>
            Logs the specified user in by authenticating the provided credentials
            (POST request to the Glitched Epistle Web API). If authentication is successful, a valid JWT is returned.
            That's needed for subsequent requests.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="passwordSHA512">The password hash (SHA-512).</param>
            <param name="totp">The 2FA code.</param>
            <returns>JWT <see langword="string" /> if auth was successful; <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.RefreshAuthToken(System.String,System.String)">
            <summary>
            Refreshes the authentication token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The current authentication token.</param>
            <returns>If all goes well, you should receive your new, fresh auth token from the backend.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.Validate2FA(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserExpirationUTC(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User" />'s expiration <see cref="T:System.DateTime" /> (in UTC).
            </summary>
            <param name="userId">The user id.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User" />'s expiration <see cref="T:System.DateTime" /> in UTC; <see langword="null" /> if the user doesn't exist.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserPublicKeyXml(System.String,System.String,System.String)">
            <summary>
            Gets one or more users' public key XML (RSA key needed for encrypting messages for that user).
            </summary>
            <param name="userId">Your user identifier.</param>
            <param name="userIds">The user ids whose public key you want to retrieve (comma-separated).</param>
            <param name="auth">The request authentication token.</param>
            <returns><c>List&lt;Tuple&lt;string, string&gt;&gt;</c> containing all of the user ids and their public key; <c>null</c> if the request failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.ChangeUserPassword(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the user password.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The authentication token.</param>
            <param name="oldPw">The old password hash (SHA-512).</param>
            <param name="newPw">The new password hash (SHA-512).</param>
            <returns><c>bool</c> indicating whether the change was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.CreateUser(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationDto)">
            <summary>
            Creates a new user.
            </summary>
            <param name="userCreationDto">DTO containing user creation parameters (for the request body).</param>
            <returns>The user creation response data containing the TOTP secret to show only ONCE to the user (won't be stored)... or <c>null</c> if the creation failed.</returns>
        </member>
    </members>
</doc>
