<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlitchedPolygons.GlitchedEpistle.Client</name>
    </assembly>
    <members>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DirectoryInfoExtensions">
            <summary>
            Class that holds <see cref="T:System.IO.DirectoryInfo"/> extension methods.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DirectoryInfoExtensions.DeleteRecursively(System.IO.DirectoryInfo)">
            <summary>
            Deletes the specified directory recursively,
            including all of its sub-directories and files.
            </summary>
            <param name="dir">The directory to delete.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions">
            <summary>
            Class holding <see cref="T:System.Security.Cryptography.RSAParameters"/> extension methods.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions.FromXml(System.String)">
            <summary>
            Deserializes an <see cref="T:System.Security.Cryptography.RSAParameters"/> instance from an xml <c>string</c>.
            </summary>
            <param name="xml">The XML containing the <see cref="T:System.Security.Cryptography.RSAParameters"/>.</param>
            <returns><see cref="T:System.Security.Cryptography.RSAParameters"/>.</returns>
            <exception cref="T:System.IO.InvalidDataException">Invalid XML RSA key.</exception>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions">
            <summary>
            <see cref="T:System.String"/> extensions.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.MD5(System.String,System.Boolean)">
            <summary>
            Computes the MD5 hash of a <c>string</c>.
            </summary>
            <param name="text">The text to hash.</param>
            <param name="toLowercase">Should the output hash be lowercased?</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.SHA512(System.String,System.Boolean)">
            <summary>
            Computes the SHA512 hash of a <c>string</c>.
            </summary>
            <param name="text">The text to hash.</param>
            <param name="toLowercase">Should the output hash <c>string</c> be lowercased?.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.EncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes a <c>string</c> to bytes (a <c>byte[]</c> array).
            </summary>
            <param name="text">The text to encode.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the conversion (default is UTF8).</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo">
            <summary>
            A highly civilized conversation between two or more homo sapiens.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Id">
            <summary>
            Unique identifier for the convo.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.CreatorId">
            <summary>
            User ID of the conversation's creator.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Name">
            <summary>
            The conversation's name.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Description">
            <summary>
            A short description of what the convo is about.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.PasswordSHA512">
            <summary>
            The convo's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.CreationTimestamp">
            <summary>
            The <see cref="T:System.DateTime"/> (UTC) this conversation was created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Expires">
            <summary>
            The exact UTC <see cref="T:System.DateTime"/> when the convo will expire.<para> </para>
            After this moment in time, no further messages can be posted to the convo
            and the conversation itself will be deleted 48h afterwards.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Participants">
            <summary>
            The people who joined the convo (their user ids).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.BannedUsers">
            <summary>
            A list of all the perma-banned users.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Messages">
            <summary>
            The conversation's messages.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message">
            <summary>
            An epistle message.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderId">
            <summary>
            The sender's ID.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderName">
            <summary>
            The sender's display username.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Timestamp">
            <summary>
            The message's timestamp in UTC.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.EncryptedText">
            <summary>
            The method's encrypted text.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.EncryptedAttachmentFileName">
            <summary>
            The encrypted attachment file name.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.EncryptedAttachmentFileId">
            <summary>
            Attached files are not stored inside the message body due to MongoDB's 16MB document size limit.<para> </para>
            Instead, a unique <see langword="string"/> is stored for downloading the attachment via GridFS.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User">
            <summary>
            The class that represents the epistle user.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Id">
            <summary>
            The user's unique identifier (the primary key for the epistle db).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Role">
            <summary>
            The user's role. 
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PasswordSHA512">
            <summary>
            The user's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Token">
            <summary>
            The token needed to authenticate Web API requests.<para> </para>
            <see cref="P:System.Tuple`2.Item1"/> is the token's UTC timestamp (when it was emitted).<para> </para>
            <see cref="P:System.Tuple`2.Item2"/> is the token <see langword="string"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.CreationTimestamp">
            <summary>
            The <see cref="T:System.DateTime"/> when this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> was first created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.ExpirationUTC">
            <summary>
            The exact <see cref="T:System.DateTime"/> (UTC) this user's access to Epistle expires.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PrivateKey">
            <summary>
            The user's private message encryption RSA key.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PublicKey">
            <summary>
            The user's public message encryption RSA key.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PublicKeyXml">
            <summary>
            The user's public message encryption RSA key (XML-formatted, using preferably <see cref="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)"/>).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.LoginFailures">
            <summary>
            How many failed login attempts this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> has on his record.
            After too many, he is locked out for a while.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.User.IsExpired">
            <summary>
            Checks whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s epistle membership is expired.
            </summary>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s epistle membership is expired or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse">
            <summary>
            A <see langword="class"/> containing the HTTP response data for <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> registration.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.Id">
            <summary>
            The user's unique identifier (the primary key for the epistle db).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.PasswordSHA512">
            <summary>
            The user's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.CreationTimestamp">
            <summary>
            The <see cref="T:System.DateTime"/> when this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> was first created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.Role">
            <summary>
            The user's role. 
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.TotpSecret">
            <summary>
            The user's 2FA TOTP secret.
            </summary>
            <value>The totp secret.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.TotpEmergencyBackupCodes">
            <summary>
            The user's 2FA TOTP emergency backup codes (can only be used once).
            </summary>
            <value>The 2FA TOTP emergency backup codes.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.UserCreationResponse.ExpirationUTC">
            <summary>
            The exact <see cref="T:System.DateTime"/> (UTC) this user's access to Epistle expires.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/> implementation for asymmetric RSA encryption/decryption.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Encrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Decrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <inheritdoc/>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA">
            <summary>
            Service interface for encrypting and decrypting <see langword="string"/>s and <see langword="byte"/>[] arrays.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Encrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts the specified text using the provided RSA public key.
            </summary>
            <param name="text">The text to encrypt.</param>
            <param name="publicKey">The public key for encryption.</param>
            <returns>The encrypted <c>string</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Decrypt(System.String,System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts the specified text using the provided RSA private key.
            </summary>
            <param name="encryptedText">The encrypted text to decrypt.</param>
            <param name="privateKey">The private RSA key needed for decryption.</param>
            <returns>Decrypted <c>string</c></returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If only the public key is provided, the <c>string</c> cannot be decrypted.</exception>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            Encrypts the specified bytes using the provided RSA public key.
            </summary>
            <param name="data">The data (<c>byte[]</c>) to encrypt.</param>
            <param name="publicKey">The public key to use for encryption.</param>
            <returns>The encrypted bytes (System.Byte[]).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAParameters)">
            <summary>
            Decrypts the specified bytes using the provided private RSA key.
            </summary>
            <param name="encryptedData">The encrypted data bytes (<c>byte[]</c>).</param>
            <param name="privateKey">The private key to use for decryption.</param>
            <returns>Decrypted bytes (System.Byte[]) if successful.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If only the public key is provided, the <c>byte[]</c> array cannot be decrypted.</exception>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen">
            <summary>
            Asymmetric crypto key generator.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen.GenerateKeyPair(System.String)">
            <summary>
            Generates the key pair.
            </summary>
            <param name="outputDirectory">The output directory (where the keys should be exported into).</param>
            <returns>Whether the key generation was successful or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.RSA4096Keygen">
            <summary>
            4096-bit RSA key generator.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen" />
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.RSA4096Keygen.GenerateKeyPair(System.String)">
            <summary>
            Generates a 4096-bit RSA key pair.<para> </para>
            The keys are exported into two files:
            Private.rsa.pem and Public.rsa.pem (inside the specified output directory).
            </summary>
            <param name="outputDirectory">The output directory path (where the keys will be exported).</param>
            <returns>Whether the key generation was successful or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger">
            <summary>
            Service interface for logging messages to their corresponding category's log file.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogMessage(System.String)">
            <summary>
            Logs an innocent message.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogWarning(System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="msg">The warning.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogError(System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="msg">The error.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings">
            <summary>
            Service interface for accessing, saving and loading user settings.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Save">
            <summary>
            Saves the current user settings out to disk.
            </summary>
            <returns>Whether the settings were saved out to disk successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Load">
            <summary>
            Loads user settings from disk into the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings"/> instance.
            </summary>
            <returns>Whether the loading procedure was successful or not.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String)">
            <summary>
            Gets or sets a user setting with its specified key <see langword="string"/>.<para> </para>
            If you are trying to get an inexistent setting, <see langword="null"/> (or <c>string.Empty</c>) should be returned.<para> </para>
            If you are trying to set an inexistent setting, the setting shall be created.
            </summary>
            <param name="key">The setting's name/key.</param>
            <returns>The setting's <c>string</c> value; <see langword="null"/> (or <c>string.Empty</c>) if the setting doesn't exist.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.String)">
            <summary>
            Gets a user setting by its key <c>string</c>.
            </summary>
            <param name="key">The setting's name/key.</param>
            <param name="defaultValue">The setting's default <c>string</c> value (in case the setting doesn't exist).</param>
            <returns>The setting's <c>string</c> value; the specified default value if the setting wasn't found.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Int32)">
            <summary>
            Gets a user setting parsed as an <c>int</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>int</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>int</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Boolean)">
            <summary>
            Gets a user setting parsed as a <c>bool</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>bool</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>bool</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Single)">
            <summary>
            Gets a user setting parsed as a <c>float</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>float</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>float</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Double)">
            <summary>
            Gets a user setting parsed as a <c>double</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>double</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>double</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService">
            <summary>
            Service interface for logging into Glitched Epistle and receiving an auth token back from the Web API, as well as extending a user's expiration date.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.Login(System.String,System.String,System.String)">
            <summary>
            Logs the specified user in by authenticating the provided credentials
            (POST request to the Glitched Epistle Web API). If authentication is successful, a valid JWT is returned.
            That's needed for subsequent requests.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="passwordSHA512">The password hash (SHA-512).</param>
            <param name="totp">The 2FA code.</param>
            <returns>JWT <see langword="string"/> if auth was successful; <see langword="null"/> otherwise.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.Validate2FA(System.String,System.String)">
            <summary>
            Validates the 2fa token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="totp">The totp.</param>
            <returns>Whether the user 2FA authentication succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserExpirationUTC(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s expiration <see cref="T:System.DateTime"/> (in UTC).
            </summary>
            <param name="userId">The user id.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s expiration <see cref="T:System.DateTime"/> in UTC; <see langword="null"/> if the user doesn't exist.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserPublicKeyXml(System.String,System.String,System.String)">
            <summary>
            Gets one or more users' public key XML (RSA key needed for encrypting messages for that user).
            </summary>
            <param name="userId">Your user identifier.</param>
            <param name="userIds">The user ids whose public key you want to retrieve (comma-separated).</param>
            <param name="auth">The request authenticatication token.</param>
            <returns><c>List&lt;Tuple&lt;string, string&gt;&gt;</c> containing all of the user ids and their public key; <c>null</c> if the request failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.ChangeUserPassword(System.String,System.String,System.String,System.String)">
            <summary>
            Changes the user password.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The authentication token.</param>
            <param name="oldPw">The old password hash (SHA-512).</param>
            <param name="newPw">The new password hash (SHA-512).</param>
            <returns><c>bool</c> indicating whether the change was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.CreateUser(System.String,System.String,System.String)">
            <summary>
            Creates a new user.
            </summary>
            <param name="passwordHash">The user's password hash (SHA-512).</param>
            <param name="publicKeyXml">The user's public key XML (RSA key for encrypting messages for him).</param>
            <param name="creationSecret">The creation secret.</param>
            <returns>The user creation response data containing the TOTP secret to show only ONCE to the user (won't be stored)... or <c>null</c> if the creation failed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.Login(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.Validate2FA(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserExpirationUTC(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserPublicKeyXml(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.ChangeUserPassword(System.String,System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.CreateUser(System.String,System.String,System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
