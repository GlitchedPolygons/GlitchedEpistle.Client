<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GlitchedPolygons.GlitchedEpistle.Client</name>
    </assembly>
    <members>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Constants.URLs">
            <summary>
            Class containing important <c>const</c> URLs.
            </summary>
        </member>
        <member name="F:GlitchedPolygons.GlitchedEpistle.Client.Constants.URLs.EPISTLE">
            <summary>
            The Glitched Epistle base URL.
            </summary>
        </member>
        <member name="F:GlitchedPolygons.GlitchedEpistle.Client.Constants.URLs.EPISTLE_API_V1">
            <summary>
            The Glitched Epistle Web API base URL.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.AsymmetricKeyParameterExtensions">
            <summary>
            Extension methods for <see cref="T:Org.BouncyCastle.Crypto.AsymmetricKeyParameter"/>. 
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.AsymmetricKeyParameterExtensions.ToPemString(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Converts a BouncyCastle <see cref="T:Org.BouncyCastle.Crypto.AsymmetricKeyParameter"/> to <c>string</c> (PEM-formatted).
            </summary>
            <param name="key">The key to stringify.</param>
            <returns><see cref="T:System.String"/> containing the PEM-formatted key.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.ByteArrayExtensions">
            <summary>
            Extension methods for <c>byte[]</c> arrays.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.ByteArrayExtensions.GetFileSizeString(System.Byte[])">
            <summary>
            Gets the <c>byte[]</c> array's human readable file size string (e.g. 5KB or 20MB).
            </summary>
            <param name="bytes">The bytes (for example a file whose size you want to retrieve in a human readable way).</param>
            <returns>A human readable file size <c>string</c> that represents the passed <c>byte[]</c> array's length (<c>string.Empty</c> if the array was <c>null</c>).</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.CollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/> implementations.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.CollectionExtensions.UnorderedEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks whether the two <see cref="T:System.Collections.Generic.ICollection`1"/> are equal (have the same elements).<para> </para>
            The order of the elements is not important; e.g. {1,2,3} and {2,3,1} would return <c>true</c>.
            </summary>
            <typeparam name="T"><see cref="T:System.Collections.Generic.ICollection`1"/> type parameter.</typeparam>
            <param name="a">Collection to compare.</param>
            <param name="b">Collection to compare.</param>
            <returns>Whether the two collections have the same elements.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DateTimeExtensions.AlmostEquals(System.DateTime,System.DateTime,System.Double)">
            <summary>
            Checks whether the given <see cref="T:System.DateTime"/> is almost equal to another <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dt1">The <see cref="T:System.DateTime"/> to compare.</param>
            <param name="dt2">The <see cref="T:System.DateTime"/> to compare.</param>
            <param name="threshold">The equality-defining threshold in seconds between the two <see cref="T:System.DateTime"/>s. If the two <see cref="T:System.DateTime"/>s are further apart from each other than this amount of seconds, they're not equal.</param>
            <returns>Whether the two <see cref="T:System.DateTime"/> objects are almost equal.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DateTimeExtensions.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to Unix time (seconds since 1970-01-01T00:00:00Z).<para> </para>
            Make sure that the <see cref="T:System.DateTime"/> you're converting is UTC!
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>Unix time (seconds since 1970-01-01T00:00:00Z)</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DateTimeExtensions.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to Unix time (milliseconds since 1970-01-01T00:00:00Z).<para> </para>
            Make sure that the <see cref="T:System.DateTime"/> you're converting is UTC!
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>Unix time (milliseconds since 1970-01-01T00:00:00Z)</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DateTimeExtensions.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Converts a unix timestamp (seconds since 1970-01-01 00:00:00.000 UTC) to a UTC <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timestamp">The unix timestamp to convert.</param>
            <returns>The converted <see cref="T:System.DateTime"/> in UTC.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DateTimeExtensions.FromUnixTimeMilliseconds(System.Int64)">
            <summary>
            Converts a unix timestamp (milliseconds since 1970-01-01 00:00:00.000 UTC) to a UTC <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timestamp">The unix timestamp to convert.</param>
            <returns>The converted <see cref="T:System.DateTime"/> in UTC.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DirectoryInfoExtensions">
            <summary>
            Class that holds <see cref="T:System.IO.DirectoryInfo"/> extension methods.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.DirectoryInfoExtensions.DeleteRecursively(System.IO.DirectoryInfo)">
            <summary>
            Deletes the specified directory recursively,
            including all of its sub-directories and files.
            </summary>
            <param name="dir">The directory to delete.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions">
            <summary>
            Class holding <see cref="T:System.Security.Cryptography.RSAParameters"/> extension methods.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions.FromXmlString(System.String)">
            <summary>
            Deserializes an <see cref="T:System.Security.Cryptography.RSAParameters"/> instance from an xml <c>string</c>.
            </summary>
            <param name="xml">The XML containing the <see cref="T:System.Security.Cryptography.RSAParameters"/>.</param>
            <returns><see cref="T:System.Security.Cryptography.RSAParameters"/>.</returns>
            <exception cref="T:System.IO.InvalidDataException">Invalid XML RSA key.</exception>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.RSAParametersExtensions.ToXmlString(System.Security.Cryptography.RSAParameters)">
            <summary>
            Converts <see cref="T:System.Security.Cryptography.RSAParameters"/> to xml.
            </summary>
            <param name="parameters">The key to convert to xml.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions">
            <summary>
            <c>string</c> extensions.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.OpenUrlInBrowser(System.String)">
            <summary>
            Opens the <c>string</c> URL in the browser.
            </summary>
            <param name="url">The URL <see cref="T:System.String"/> to open.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.NotNullNotEmpty(System.String)">
            <summary>
            Returns <c>true</c> when the passed <c>string</c> is not <c>null</c> or empty; <c>false</c> otherwise.
            </summary>
            <param name="str">The <c>string</c> to check.</param>
            <returns><c>!string.IsNullOrEmpty(str)</c></returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.NullOrEmpty(System.String)">
            <summary>
            Returns whether the passed string is <c>null</c> or empty.
            </summary>
            <param name="str">The <c>string</c> to check.</param>
            <returns><c>string.IsNullOrEmpty(str)</c></returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.MD5(System.String,System.Boolean)">
            <summary>
            Computes the MD5 hash of a <c>string</c>.
            </summary>
            <param name="text">The text to hash.</param>
            <param name="toLowercase">Should the output hash be lowercased?</param>
            <returns>MD5 hash of the input string.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.SHA512(System.String,System.Boolean)">
            <summary>
            Computes the SHA512 of a <c>string</c>.
            </summary>
            <param name="text">The text to hash.</param>
            <param name="toLowercase">Should the output hash <c>string</c> be lowercased?.</param>
            <returns>SHA512 of the input string.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Extensions.StringExtensions.EncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes a <c>string</c> to bytes (a <c>byte[]</c> array).
            </summary>
            <param name="text">The text to encode.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the conversion (default is UTF8).</param>
            <returns>The encoded <c>byte[]</c> array.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo">
            <summary>
            A highly civilized conversation between two or more homo sapiens.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Id">
            <summary>
            Unique identifier for the convo.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.CreatorId">
            <summary>
            User ID of the conversation's creator.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Name">
            <summary>
            The conversation's name.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Description">
            <summary>
            A short description of what the convo is about.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.CreationTimestampUTC">
            <summary>
            The <see cref="T:System.DateTime"/> (UTC) this conversation was created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.ExpirationUTC">
            <summary>
            The exact UTC <see cref="T:System.DateTime"/> when the convo will expire.<para> </para>
            After this moment in time, no further messages can be posted to the convo
            and the conversation itself will be deleted 48h afterwards.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Participants">
            <summary>
            The people who joined the convo (their user ids).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.BannedUsers">
            <summary>
            A list of all the perma-banned users.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.IsExpired">
            <summary>
            Determines whether this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> is expired.
            </summary>
            <returns><c>true</c> if the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> is expired; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.GetParticipantIdsCommaSeparated">
            <summary>
            Gets all of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s participants (their ids) comma-separated;
            ready for submitting them with <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserPublicKey(System.String,System.String,System.String)"/>.
            </summary>
            <returns>The participant user ids separated by commas.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.GetBannedUsersCommaSeparated">
            <summary>
            Gets the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s black list (as a comma-separated list of user ids).
            </summary>
            <returns>Comma-separated <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Id"/>s that are banned from this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.op_Implicit(GlitchedPolygons.GlitchedEpistle.Client.Models.Convo)~GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto">
            <summary>
            Converts a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> object into a data-transfer object for the backend (<see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto"/>).
            </summary>
            <param name="convo">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> to convert to a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto"/>.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto)">
            <summary>
            Checks for equality against a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto"/> data transfer object (coming from the backend).
            </summary>
            <param name="other">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto"/> to compare to this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.</param>
            <returns>Whether the two convos are equal or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.Convo)">
            <summary>
            Checks for equality against another <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> instance.
            </summary>
            <param name="other">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> to compare to.</param>
            <returns>Whether the two <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s are equal or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto">
            <summary>
            DTO for changing an existing <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s metadata
            (such as for example updating the title or description, or extending its lifespan).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.UserId">
            <summary>
            The <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Id"/> of who is making the request.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.Auth">
            <summary>
            The requesting user's authentication token.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.ConvoId">
            <summary>
            The unique id of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> whose metadata should be changed.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.ConvoPasswordSHA512">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s access password (hashed using SHA512).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.CreatorId">
            <summary>
            The new convo admin.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.Name">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> name/title.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.Description">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s new description text.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.NewConvoPasswordSHA512">
            <summary>
            The changed access password hash for this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.ExpirationUTC">
            <summary>
            The new convo expiration <see cref="T:System.DateTime"/> (UTC).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto">
            <summary>
            Data-transfer object for the creation of a new <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.Name">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> name (title).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.Description">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> description (e.g. what is the convo about?).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.PasswordSHA512">
            <summary>
            The convo's access password SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.ExpirationUTC">
            <summary>
            The conversation's expiration date (in UTC).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto">
            <summary>
            Data transfer object class for a conversation's metadata (like e.g. the name, description, etc...).
            Does not contain sensitive information such as passwords, etc...
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Id">
            <summary>
            Unique <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> identifier.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.CreatorId">
            <summary>
            The creator user identifier.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Name">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> name/title.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Description">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s description text.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.CreationTimestampUTC">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s creation timestamp (UTC).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.ExpirationUTC">
            <summary>
            Convo expiration <see cref="T:System.DateTime"/> (UTC).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Participants">
            <summary>
            The convo's participants (user ids separated by a comma: ',').
            </summary>
            <value>The participants.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.BannedUsers">
            <summary>
            The convo's banned users (their user id), separated by a comma: ','.
            </summary>
            <value>The banned users.</value>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.op_Implicit(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto)~GlitchedPolygons.GlitchedEpistle.Client.Models.Convo">
            <summary>
            Converts a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto"/> data-transfer object from the backend into a full-fletched, client <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> instance.
            </summary>
            <param name="dto"></param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoMetadataDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto">
            <summary>
            DTO for the message post request parameters (request body).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.ConvoPasswordSHA512">
            <summary>
            The conversation's access pw.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.UserId">
            <summary>
            The message author's user id.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.Auth">
            <summary>
            The message author's request authentication token.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.SenderName">
            <summary>
            The message author's username (to display).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.MessageBodiesJson">
            <summary>
            The message's encrypted bodies (packed into json key-value pairs).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto">
            <summary>
            DTO for password change requests to the Epistle Web API.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.UserId">
            <summary>
            The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> id of who wants to change his password.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.Auth">
            <summary>
            Request authentication token.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.OldPwSHA512">
            <summary>
            Old password SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.NewPwSHA512">
            <summary>
            New password's SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.NewPrivateKey">
            <summary>
            New (encrypted) private key.<para> </para>
            Needs to be PEM-formatted and encrypted into <c>byte[]</c> and then gzipped and base-64 encoded.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto">
            <summary>
            DTO for creating a new <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.PasswordSHA512">
            <summary>
            The user's desired password SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.PublicKey">
            <summary>
            The user's public RSA key.<para> </para>
            PEM-formatted, and then gzipped via <c>Encoding.UTF8.GetBytes(string)</c> using <c>CompressionLevel.Fastest</c> and ultimately base-64 encoded.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.PrivateKey">
            <summary>
            The user's private message decryption RSA key.<para> </para>
            PEM-formatted and encrypted into <c>byte[]</c> and then gzipped and base-64 encoded.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.CreationSecret">
            <summary>
            The server creation secret <c>string</c>.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto">
            <summary>
            A <c>class</c> containing the HTTP response data for <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> registration.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.Id">
            <summary>
            The user's unique identifier (the primary key for the epistle db).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.PasswordSHA512">
            <summary>
            The user's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.CreationTimestampUTC">
            <summary>
            The <see cref="T:System.DateTime"/> when this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> was first created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.Role">
            <summary>
            The user's role. 
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.TotpSecret">
            <summary>
            The user's 2FA TOTP secret.
            </summary>
            <value>The totp secret.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.TotpEmergencyBackupCodes">
            <summary>
            The user's 2FA TOTP emergency backup codes (can only be used once).
            </summary>
            <value>The 2FA TOTP emergency backup codes.</value>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.ExpirationUTC">
            <summary>
            The exact <see cref="T:System.DateTime"/> (UTC) this user's access to Epistle expires.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationResponseDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto">
            <summary>
            HTTP request parameter DTO for user login.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto.UserId">
            <summary>
            The id of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> who wants to log in.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto.PasswordSHA512">
            <summary>
            The user's password SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto.Totp">
            <summary>
            2FA token.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto">
            <summary>
            Response body for successful login requests.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto.Auth">
            <summary>
            Valid request authentication token.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto.PublicKey">
            <summary>
            The user's public key.
            Others need this in order to send the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> messages.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto.PrivateKey">
            <summary>
            The user's private key; PEM-formatted and encrypted into <c>byte[]</c> and then gzipped and base-64 encoded.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message">
            <summary>
            An epistle message.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Id">
            <summary>
            Gets the message's unique identifier, which is <para> </para>
            md5( <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderId"/> + <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.TimestampUTC"/> )
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderId">
            <summary>
            The sender's ID.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.SenderName">
            <summary>
            The sender's display username.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.TimestampUTC">
            <summary>
            The message's timestamp in UTC.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Body">
            <summary>
            This is the message body - a json string that's been encrypted specifically for its recipient user (using that user's public RSA key).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.Message)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User">
            <summary>
            The class that represents the epistle user.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Id">
            <summary>
            The user's unique identifier (the primary key for the epistle db).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Role">
            <summary>
            The user's role. 
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PasswordSHA512">
            <summary>
            The user's password hashed with SHA512.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Token">
            <summary>
            The token needed to authenticate Web API requests.<para> </para>
            <see cref="P:System.Tuple`2.Item1"/> is the token's UTC timestamp (when it was emitted).<para> </para>
            <see cref="P:System.Tuple`2.Item2"/> is the token <c>string</c>.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.CreationTimestampUTC">
            <summary>
            The <see cref="T:System.DateTime"/> when this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> was first created.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.ExpirationUTC">
            <summary>
            The exact <see cref="T:System.DateTime"/> (UTC) this user's access to Epistle expires.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PrivateKeyPem">
            <summary>
            The user's private message decryption RSA key (PEM-formatted).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PublicKeyPem">
            <summary>
            The user's public message encryption RSA key (PEM-formatted).
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.LoginFailures">
            <summary>
            How many failed login attempts this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> has on his record.
            After too many, he is locked out for a while.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.User.IsExpired">
            <summary>
            Checks whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s epistle membership is expired.
            </summary>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s epistle membership is expired or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Equals(GlitchedPolygons.GlitchedEpistle.Client.Models.User)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.User.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Models.User.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoPasswordProvider">
            <summary>
            Default implementation (thread safe through usage of standard locks) of the  <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider"/> interface.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoPasswordProvider.GetPasswordSHA512(System.String)">
            <summary>
            Gets a conversation's password SHA512 from the session's password provider.<para></para>
            Returns <c>null</c> if the user has never accessed the convo during the session.
            </summary>
            <param name="convoId">The convo identifier.</param>
            <returns>The convo's password SHA512 <c>string</c>; <c>null</c> if the password was</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoPasswordProvider.SetPasswordSHA512(System.String,System.String)">
            <summary>
            Saves a convo's password SHA512 for the current app session for easy access.
            </summary>
            <param name="convoId">The convo identifier.</param>
            <param name="passwordSHA512">The password's SHA512.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoPasswordProvider.RemovePasswordSHA512(System.String)">
            <summary>
            Removes a convo password SHA512 from the session's cache.
            </summary>
            <param name="convoId">The convo identifier.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoPasswordProvider.Clear">
            <summary>
            Clears all session-stored passwords.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite">
            <summary>
            SQLite repository class for accessing all locally stored <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s.<para> </para>
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite"/> class that will provide 
            functionality for accessing the local <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> storage database using SQLite.<para> </para>
            This db only contains the metadata for the convos stored locally on the device.<para> </para>
            If the provided connection string points to a file that doesn't exist or to a db that does not contain 
            the convos table, a correct SQLite database + table will be created at that path.
            </summary>
            <param name="connectionString">Connection string containing the SQLite db file path.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.OpenConnection">
            <summary>
            Opens a <see cref="T:System.Data.IDbConnection"/> to the SQLite database. <para> </para>
            Does not dispose automatically: make sure to wrap your usage into a <c>using</c> block.
            </summary>
            <returns>The opened <see cref="T:System.Data.IDbConnection"/> (remember to dispose of it asap after you're done!).</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Item(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> synchronously by its unique identifier.
            </summary>
            <param name="id">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s unique identifier.</param>
            <returns>The first found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>; <c>null</c> if nothing was found.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Get(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> asynchronously by its unique identifier.
            </summary>
            <param name="id">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s unique identifier.</param>
            <returns>The first found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>; <c>null</c> if nothing was found.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.GetAll">
            <summary>
            Gets all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s from the repository.
            </summary>
            <returns>All <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s inside the repo.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{GlitchedPolygons.GlitchedEpistle.Client.Models.Convo,System.Boolean}})">
            <summary>
            Gets a single entity from the repo according to the specified predicate condition.<para> </para>
            If 0 or &gt;1 entities are found, <c>null</c> is returned.<para> </para>
            </summary>
            <param name="predicate">The search predicate.</param>
            <returns>Single found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> or <c>null</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Find(System.Linq.Expressions.Expression{System.Func{GlitchedPolygons.GlitchedEpistle.Client.Models.Convo,System.Boolean}})">
            <summary>
            Finds all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s according to the specified predicate <see cref="T:System.Linq.Expressions.Expression" />.<para> </para>
            </summary>
            <param name="predicate">The search predicate (all entities that match the provided conditions will be added to the query's result).</param>
            <returns>The found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Add(GlitchedPolygons.GlitchedEpistle.Client.Models.Convo)">
            <summary>
            Adds a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> entry to the repository.
            </summary>
            <param name="convo">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> to add.</param>
            <returns>Whether the operation was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.AddRange(System.Collections.Generic.IEnumerable{GlitchedPolygons.GlitchedEpistle.Client.Models.Convo})">
            <summary>
            Adds multiple <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s in bulk to the repository (SQLite db).
            </summary>
            <param name="convos">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s to add.</param>
            <returns>Whether the operation was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Update(GlitchedPolygons.GlitchedEpistle.Client.Models.Convo)">
            <summary>
            Updates an existing <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> record inside the db.
            </summary>
            <param name="updatedConvo">The new (updated) <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> instance.</param>
            <returns>Whether the operation was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Remove(GlitchedPolygons.GlitchedEpistle.Client.Models.Convo)">
            <summary>
            Removes the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convo">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> to remove.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> could be removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.Remove(System.String)">
            <summary>
            Removes the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="id">The unique id of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> to remove.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> could be removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.RemoveAll">
            <summary>
            Removes all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s at once from the repository.
            </summary>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s were removed successfully or not. If the repository was already empty, <c>false</c> is returned (because nothing was actually &lt;&lt;removed&gt;&gt; ).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.RemoveRange(System.Linq.Expressions.Expression{System.Func{GlitchedPolygons.GlitchedEpistle.Client.Models.Convo,System.Boolean}})">
            <summary>
            Removes all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s that match the specified conditions.<para> </para>
            </summary>
            <param name="predicate">The predicate <see cref="T:System.Linq.Expressions.Expression"/> that defines which entities should be removed.</param>
            <returns>Whether the entities were removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.RemoveRange(System.Collections.Generic.IEnumerable{GlitchedPolygons.GlitchedEpistle.Client.Models.Convo})">
            <summary>
            Removes the range of <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s from the repository.
            </summary>
            <param name="convos">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s to remove.</param>
            <returns>Whether all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s were removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoRepositorySQLite.RemoveRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the range of <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s from the repository.
            </summary>
            <param name="ids">The unique ids of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s to remove.</param>
            <returns>Whether all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s were removed successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService">
            <summary>
            Service interface responsible for accessing convos on the web API (remote).
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService" /> <c>interface</c>.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.CreateConvo(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto,System.String,System.String)">
            <summary>
            Creates a new convo on the server.
            </summary>
            <param name="convoRequestDto">The convo creation DTO.</param>
            <param name="userId">The user identifier (who's making the request).</param>
            <param name="auth">The authentication token (JWT).</param>
            <returns><c>null</c> if creation failed; the created <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />'s unique id.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.DeleteConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes a convo server-side.
            </summary>
            <param name="convoId">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />'s identifier.</param>
            <param name="totp">2FA token.</param>
            <param name="userId">The user identifier (who's making the request; needs to be the convo's admin).</param>
            <param name="auth">The authentication JWT.</param>
            <returns>Whether deletion was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.PostMessage(System.String,GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto)">
            <summary>
            Posts a message to a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="messageDto">The message post parameters (for the request body).</param>
            <returns>Whether the message was posted successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.GetConvoMetadata(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a convo's metadata (description, timestamp, etc...).
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a participant of the convo).</param>
            <param name="auth">The authentication token.</param>
            <returns>The convo's metadata wrapped into a DTO (<c>null</c> if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.ChangeConvoMetadata(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto)">
            <summary>
            Changes a convo's metadata (description, title, etc...).<para> </para>
            The user making the request needs to be the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s admin (Creator).<para> </para>
            If you're assigning a new admin, he needs to be a participant of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>, else you'll get a bad request returned from the web api.
            </summary>
            <param name="metadata">Request DTO containing authentication parameters + the data that needs to be changed (<c>null</c> fields will be ignored; fields with values will be updated and persisted into the server's db).</param>
            <returns>Whether the convo's metadata was changed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.GetConvoMessages(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the convo messages.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a convo participant).</param>
            <param name="auth">The request authentication token.</param>
            <param name="tailId">The id of the tail message from which to start retrieving subsequent messages (e.g. starting from message id that evaluates to index 4 will not include <c>convo.Messages[4]</c>). Here you would pass the id of the last message the client already has. If this is null or empty, all messages will be retrieved!</param>
            <returns>The retrieved <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message" />s (<c>null</c> if everything is up to date or if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.IndexOf(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the index of a message inside a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user identifier of who's making the request.</param>
            <param name="auth">The request authentication JWT.</param>
            <param name="messageId">The message identifier.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message" />'s index integer; if something fails, <c>-1</c> is returned.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.JoinConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Join a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The identifier of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" /> that you're trying to join.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user's identifier (who wants to join).</param>
            <param name="auth">The authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" /> was joined successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.LeaveConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Leave a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="totp">2FA TOTP code.</param>
            <param name="userId">The user identifier (who's leaving the convo).</param>
            <param name="auth">The request authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" /> was left successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.ConvoService.KickUser(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Kick a user from a conversation.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="convoAdminId">Your user id (you need to be a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo" />'s admin in order to kick people out of it).</param>
            <param name="auth">The request authentication token.</param>
            <param name="userIdToKick">The user id of who you're kicking out.</param>
            <param name="permaBan">If set to <c>true</c>, the kicked user won't be able to rejoin the convo permanently.</param>
            <returns>Whether the user was kicked out successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider">
            <summary>
            Interface for storing <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> password SHA512 strings during a session.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider.GetPasswordSHA512(System.String)">
            <summary>
            Gets a conversation's password SHA512 from the session's password provider.<para> </para>
            Returns <c>null</c> if the user has never accessed the convo during the session.
            </summary>
            <param name="convoId">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> identifier.</param>
            <returns>The convo's password SHA512 <c>string</c>; <c>null</c> if the password was</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider.SetPasswordSHA512(System.String,System.String)">
            <summary>
            Saves a convo's password SHA512 for the current app session for easy access.
            </summary>
            <param name="convoId">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> identifier.</param>
            <param name="passwordSHA512">The password's SHA512.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider.RemovePasswordSHA512(System.String)">
            <summary>
            Removes a convo password SHA512 from the session's cache.
            </summary>
            <param name="convoId">The convo identifier.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoPasswordProvider.Clear">
            <summary>
            Clears all session-stored passwords.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService">
            <summary>
            Service interface responsible for accessing convos on the web API (remote).
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.CreateConvo(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoCreationRequestDto,System.String,System.String)">
            <summary>
            Creates a new convo on the server.
            </summary>
            <param name="convoRequestDto">The convo creation DTO.</param>
            <param name="userId">The user identifier (who's making the request).</param>
            <param name="auth">The authentication token (JWT).</param>
            <returns><c>null</c> if creation failed; the created <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s unique id.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.DeleteConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes a convo server-side.
            </summary>
            <param name="convoId">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s identifier.</param>
            <param name="totp">2FA token.</param>
            <param name="userId">The user identifier (who's making the request; needs to be the convo's admin).</param>
            <param name="auth">The authentication JWT.</param>
            <returns>Whether deletion was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.PostMessage(System.String,GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.PostMessageParamsDto)">
            <summary>
            Posts a message to a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="messageDto">The message post parameters (for the request body).</param>
            <returns>Whether the message was posted successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.GetConvoMetadata(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a convo's metadata (description, timestamp, etc...).
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a participant of the convo).</param>
            <param name="auth">The authentication token.</param>
            <returns>The convo's metadata wrapped into a DTO (<c>null</c> if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.ChangeConvoMetadata(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.ConvoChangeMetadataRequestDto)">
            <summary>
            Changes a convo's metadata (description, title, etc...).<para> </para>
            The user making the request needs to be the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s admin (Creator).<para> </para>
            If you're assigning a new admin, he needs to be a participant of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>, else you'll get a bad request returned from the web api.
            </summary>
            <param name="metadata">Request DTO containing authentication parameters + the data that needs to be changed (<c>null</c> fields will be ignored; fields with values will be updated and persisted into the server's db).</param>
            <returns>Whether the convo's metadata was changed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.GetConvoMessages(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the convo messages.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user identifier (needs to be a convo participant).</param>
            <param name="auth">The request authentication token.</param>
            <param name="tailId">The id of the tail message from which to start retrieving subsequent messages (e.g. starting from message id that evaluates to index 4 will not include <c>convo.Messages[4]</c>). Here you would pass the id of the last message the client already has. If this is null or empty, all messages will be retrieved!</param>
            <returns>The retrieved <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message" />s (<c>null</c> if everything is up to date or if something failed).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.IndexOf(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the index of a message inside a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user identifier of who's making the request.</param>
            <param name="auth">The request authentication JWT.</param>
            <param name="messageId">The message identifier.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>'s index integer; if something fails, <c>-1</c> is returned.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.JoinConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Join a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The identifier of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> that you're trying to join.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="userId">The user's identifier (who wants to join).</param>
            <param name="auth">The authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> was joined successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.LeaveConvo(System.String,System.String,System.String,System.String)">
            <summary>
            Leave a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="totp">2FA TOTP code.</param>
            <param name="userId">The user identifier (who's leaving the convo).</param>
            <param name="auth">The request authentication token.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/> was left successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService.KickUser(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Kick a user from a conversation.
            </summary>
            <param name="convoId">The convo's identifier.</param>
            <param name="convoPasswordSHA512">The convo's password hash.</param>
            <param name="convoAdminId">Your user id (you need to be a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s admin in order to kick people out of it).</param>
            <param name="auth">The request authentication token.</param>
            <param name="userIdToKick">The user id of who you're kicking out.</param>
            <param name="permaBan">If set to <c>true</c>, the kicked user won't be able to rejoin the convo permanently.</param>
            <returns>Whether the user was kicked out successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IMessageRepository">
            <summary>
            Message repository.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IMessageRepository.GetLastMessageId">
            <summary>
            Gets the <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Id"/> from the most recent <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> in the repository.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IMessageRepository.GetLastMessages(System.Int32,System.Int32)">
            <summary>
            Gets the n latest <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s from the repo, optionally starting from an offset index.
            </summary>
            <param name="n">The amount of messages to retrieve.</param>
            <param name="offset">How many entries to skip before starting to gather messages.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite">
            <summary>
            SQLite repository class for accessing a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>'s messages.<para> </para>
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite"/> class that will provide 
            functionality for accessing an epistle <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> storage database using SQLite.<para> </para>
            If the provided connection string points to a file that doesn't exist or a db that does not contain 
            the messages table, a correct SQLite database + table will be created at that path.
            </summary>
            <param name="connectionString">Connection string containing the SQLite db file path.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.OpenConnection">
            <summary>
            Opens a <see cref="T:System.Data.IDbConnection"/> to the SQLite database. <para> </para>
            Does not dispose automatically: make sure to wrap your usage into a <c>using</c> block.
            </summary>
            <returns>The opened <see cref="T:System.Data.IDbConnection"/> (remember to dispose of it asap after you're done!).</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Item(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> synchronously by its unique identifier.
            </summary>
            <param name="id">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>'s unique identifier.</param>
            <returns>The first found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>; <c>null</c> if nothing was found.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.GetLastMessageId">
            <summary>
            Gets the <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.Message.Id"/> from the most recent <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> in the repository.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Get(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> asynchronously by its unique identifier.
            </summary>
            <param name="id">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>'s unique identifier.</param>
            <returns>The first found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>; <c>null</c> if nothing was found.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.GetAll">
            <summary>
            Gets all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s from the repository.
            </summary>
            <returns>All <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s inside the repo.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.GetLastMessages(System.Int32,System.Int32)">
            <summary>
            Gets the n latest <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s from the repo.
            </summary>
            <param name="n">The amount of messages to retrieve.</param>
            <param name="offset">How many entries to skip before starting to gather messages.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.SingleOrDefault(System.Linq.Expressions.Expression{System.Func{GlitchedPolygons.GlitchedEpistle.Client.Models.Message,System.Boolean}})">
            <summary>
            Gets a single <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> from the repo according to the specified predicate condition.<para> </para>
            If 0 or &gt;1 entities are found, <c>null</c> is returned.<para> </para>
            </summary>
            <param name="predicate">The search predicate.</param>
            <returns>Single found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> or <c>null</c>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Find(System.Linq.Expressions.Expression{System.Func{GlitchedPolygons.GlitchedEpistle.Client.Models.Message,System.Boolean}})">
            <summary>
            Finds all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s according to the specified predicate <see cref="T:System.Linq.Expressions.Expression" />.<para> </para>
            </summary>
            <param name="predicate">The search predicate (all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s that match the provided conditions will be added to the query's result).</param>
            <returns>The found <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Add(GlitchedPolygons.GlitchedEpistle.Client.Models.Message)">
            <summary>
            Adds a message to the repository.
            </summary>
            <param name="message">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> to add.</param>
            <returns>Whether the operation was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.AddRange(System.Collections.Generic.IEnumerable{GlitchedPolygons.GlitchedEpistle.Client.Models.Message})">
            <summary>
            Adds multiple <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s in bulk to the repository (SQLite db).
            </summary>
            <param name="messages">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s to add.</param>
            <returns>Whether the operation was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Update(GlitchedPolygons.GlitchedEpistle.Client.Models.Message)">
            <summary>
            Updates an existing <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> record inside the db.
            </summary>
            <param name="message">The new (updated) <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> instance.</param>
            <returns>Whether the operation was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Remove(GlitchedPolygons.GlitchedEpistle.Client.Models.Message)">
            <summary>
            Removes the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>.
            </summary>
            <param name="message">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> to remove.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> could be removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.Remove(System.String)">
            <summary>
            Removes the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>.
            </summary>
            <param name="id">The unique id of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> to remove.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/> could be removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.RemoveAll">
            <summary>
            Removes all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s at once from the repository.
            </summary>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s were removed successfully or not. If the repository was already empty, <c>false</c> is returned (because nothing was actually &lt;&lt;removed&gt;&gt; ).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.RemoveRange(System.Linq.Expressions.Expression{System.Func{GlitchedPolygons.GlitchedEpistle.Client.Models.Message,System.Boolean}})">
            <summary>
            Removes all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s that match the specified conditions.<para> </para>
            </summary>
            <param name="predicate">The predicate <see cref="T:System.Linq.Expressions.Expression"/> that defines which <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s should be removed.</param>
            <returns>Whether the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s were removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.RemoveRange(System.Collections.Generic.IEnumerable{GlitchedPolygons.GlitchedEpistle.Client.Models.Message})">
            <summary>
            Removes the range of <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s from the repository.
            </summary>
            <param name="messages">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s to remove.</param>
            <returns>Whether all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s were removed successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.MessageRepositorySQLite.RemoveRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the range of <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s from the repository.
            </summary>
            <param name="ids">The unique ids of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s to remove.</param>
            <returns>Whether all <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Message"/>s were removed successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.CouponService">
            <summary>
            Service class for redeeming subscription coupons.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.CouponService.UseCoupon(System.String,System.String,System.String)">
            <summary>
            Redeems a coupon code to extend a user's Epistle account membership.
            </summary>
            <param name="code">The coupon code.</param>
            <param name="userId">The user identifier to which the coupon should be applied.</param>
            <param name="auth">The jwt auth token.</param>
            <returns>Whether the coupon code was redeemed successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.ICouponService">
            <summary>
            Service interface for redeeming subscription coupons.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Coupons.ICouponService.UseCoupon(System.String,System.String,System.String)">
            <summary>
            Redeems a coupon code to extend a user's Epistle account membership.
            </summary>
            <param name="code">The coupon code.</param>
            <param name="userId">The user identifier to which the coupon should be applied.</param>
            <param name="auth">The jwt auth token.</param>
            <returns>Whether the coupon code was redeemed successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/> implementation for asymmetric RSA encryption/decryption.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA" />
        </member>
        <member name="F:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.signatureAlgo">
            <summary>
            The algorithm used for signing and verifying.
            <seealso cref="T:Org.BouncyCastle.Security.SignerUtilities"/>
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA"/> instance
            to use for encrypting/decrypting, signing and verifying data strings and bytes.
            </summary>
            <param name="signatureAlgo">The signature algorithm to use in the signing and verifying methods. Check out <see cref="T:Org.BouncyCastle.Security.SignerUtilities"/> for more information about what <c>string</c> values are valid here.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the specified text using the provided RSA public key, which needs to be a PEM-formatted <c>string</c>.
            </summary>
            <param name="text">The plain text to encrypt.</param>
            <param name="publicKeyPem">The public RSA key for encryption (PEM-formatted <c>string</c>).</param>
            <returns>The encrypted <c>string</c>; <c>string.Empty</c> if the passed key or plain text argument was <c>null</c> or empty; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the specified text using the provided RSA private key, which needs to be a PEM-formatted <c>string</c>.
            </summary>
            <param name="encryptedText">The encrypted text to decrypt.</param>
            <param name="privateKeyPem">The private RSA key needed for decryption (PEM-formatted <c>string</c>).</param>
            <returns>Decrypted <c>string</c>; <c>null</c> if the passed key or encrypted text argument was <c>null</c> or empty; <c>null</c> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts the specified bytes using the provided RSA public key, which needs to be a PEM-formatted <c>string</c>.
            </summary>
            <param name="data">The data (<c>byte[]</c> array) to encrypt.</param>
            <param name="publicKeyPem">The public key (PEM-formatted <c>string</c>) to use for encryption.</param>
            <returns>The encrypted bytes (<c>System.Byte[]</c>); <c>Array.Empty&lt;byte&gt;()</c> if the passed data or key argument was <c>null</c> or empty; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts the specified bytes using the provided private RSA key (which needs to be a PEM-formatted <c>string</c>).
            </summary>
            <param name="encryptedData">The encrypted data bytes (<c>byte[]</c>).</param>
            <param name="privateKeyPem">The private RSA key to use for decryption (PEM-formatted <c>string</c>).</param>
            <returns>Decrypted bytes (System.Byte[]) if successful; an empty <c>byte[]</c> array if the passed data or key argument was <c>null</c> or empty; <c>null</c> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Sign(System.String,System.String)">
            <summary>
            Signs the specified <c>string</c> using the provided private RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            Signature algo is the value of <see cref="F:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.signatureAlgo"/>; see <see cref="T:Org.BouncyCastle.Security.SignerUtilities"/> for more information about what algorithms are supported and what <c>string</c>s to use here.<para> </para>
            If the procedure succeeds, the calculated signature <c>string</c> is returned (which is base-64 encoded).<para> </para>
            Otherwise, an empty <c>string</c> is returned if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters
            were <c>null</c> or empty. If the procedure fails entirely, <c>null</c> is returned.
            </summary>
            <param name="data">The data to sign.</param>
            <param name="privateKeyPem">The private RSA key to use for generating the signature (PEM-formatted <c>string</c>)</param>
            <returns>The signature (base-64 encoded <c>string</c>). <c>string.Empty</c> is returned if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters were <c>null</c> or empty. Returns <c>null</c> if signing failed entirely.</returns>
            <seealso cref="T:Org.BouncyCastle.Security.SignerUtilities"/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Verify(System.String,System.String,System.String)">
            <summary>
            Verifies a signature that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Sign(System.String,System.String)"/>
            with a public RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            </summary>
            <param name="data">The data whose signature you want to verify.</param>
            <param name="signature">The passed <paramref name="data"/>'s signature (return value of <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Sign(System.String,System.String)"/>).</param>
            <param name="publicKeyPem">The public RSA key (PEM-formatted) to use for signature verification.</param>
            <returns>Whether the data's signature verification succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Sign(System.Byte[],System.String)">
            <summary>
            Signs the specified data <c>byte[]</c> array using the provided private RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            If the procedure succeeds, the calculated signature <c>byte[]</c> array is returned. Otherwise,
            an empty <c>byte[]</c> array is returned if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters
            were <c>null</c> or empty. If the procedure fails entirely, <c>null</c> is returned.
            </summary>
            <param name="data">The data to sign.</param>
            <param name="privateKeyPem">The private RSA key to use for generating the signature (PEM-formatted <c>string</c>).</param>
            <returns>The signature (<c>byte[]</c>), <c>string.Empty</c> if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters were <c>null</c> or empty. Returns <c>null</c> if signing failed entirely.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Verify(System.Byte[],System.Byte[],System.String)">
            <summary>
            Verifies a signature that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Sign(System.Byte[],System.String)"/> with a public RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            </summary>
            <param name="data">The data whose signature you want to verify.</param>
            <param name="signature">The passed <paramref name="data"/>'s signature (return value of <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.Sign(System.Byte[],System.String)"/>).</param>
            <param name="publicKeyPem">The public RSA key (PEM-formatted) to use for signature verification.</param>
            <returns>Whether the data's signature verification succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.PemStringToKeyPair(System.String)">
            <summary>
            Tries to convert a PEM-formatted <c>string</c> => <see cref="T:Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair"/>.<para> </para>
            Only possible if the provided key is the private key (public keys are typically read with the <see cref="T:Org.BouncyCastle.OpenSsl.PemReader"/> as <see cref="T:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters"/>).
            </summary>
            <param name="rsaKeyPem">The PEM-formatted key <c>string</c> to convert.</param>
            <returns>The converted <see cref="T:Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair"/>; <c>null</c> if the provided key <c>string</c> was <c>null</c>, empty or the public key.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.PemStringToKeyParameters(System.String)">
            <summary>
            Tries to convert a PEM-formatted <c>string</c> => <see cref="T:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters"/>.<para> </para>
            </summary>
            <param name="rsaKeyPem">The PEM-formatted key <c>string</c> to convert.</param>
            <returns>The converted <see cref="T:Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters"/>; <c>null</c> if the provided key <c>string</c> was <c>null</c> or empty.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricCryptographyRSA.ProcessData(System.Byte[],Org.BouncyCastle.Crypto.ICipherParameters,System.Boolean)">
            <summary>
            Encrypts or decrypts the input <paramref name="data"/> parameter
            according to the <paramref name="encrypt"/> <c>bool</c> parameter, using the provided RSA <paramref name="key"/>.<para> </para>
            If <paramref name="encrypt"/> is set to <c>false</c>, the method will try to decrypt instead.<para> </para>
            This method can throw exceptions! E.g. don't pass any <c>null</c> or invalid arguments.
            Trying to decrypt with a <c>null</c> or public <paramref name="key"/> will throw exceptions! Make sure to wrap the call to this method in a try/catch block.
            </summary>
            <param name="data">The data to encrypt or decrypt</param>
            <param name="key">The RSA key to use for encryption/decryption.</param>
            <param name="encrypt">Should the method encrypt the passed input <paramref name="data"/> or attempt to decrypt it?</param>
            <returns>The processed data <c>byte[]</c> array; exceptions are thrown in case of a failure.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricKeygenRSA4096">
            <summary>
            4096-bit RSA key generator.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen" />
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricKeygenRSA4096.#ctor(GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricKeygenRSA4096"/> class.
            </summary>
            <param name="logger">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger"/> instance with which any eventual problems/errors will be logged.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.AsymmetricKeygenRSA4096.GenerateKeyPair">
            <summary>
            Generates a 4096-bit RSA key pair.<para> </para>
            Returns the RSA key pair <see cref="T:System.Tuple"/>,
            where the first item is the public key and the second is the private key.
            If generation failed for some reason, <c>null</c> is returned.
            </summary>
            <returns>The RSA key pair <see cref="T:System.Tuple"/>, where the first item is the public key and the second is the private key. If generation failed for some reason, <c>null</c> is returned.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA">
            <summary>
            Service interface for encrypting and decrypting <c>string</c>s and <c>byte</c>[] arrays.<para> </para>
            Please note that these methods can and WILL throw exceptions if the cryptographic operations fail for some reason.<para> </para>
            Make sure that everything you encrypt with these methods will also be decrypted again using the same code.<para> </para>
            DO NOT MIX crypto libraries under any circumstances!
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the specified text using the provided RSA public key, which needs to be a PEM-formatted <c>string</c>.
            </summary>
            <param name="text">The plain text to encrypt.</param>
            <param name="publicKeyPem">The public RSA key for encryption (PEM-formatted <c>string</c>).</param>
            <returns>The encrypted <c>string</c>; <c>string.Empty</c> if the passed key or plain text argument was <c>null</c> or empty; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the specified text using the provided RSA private key, which needs to be a PEM-formatted <c>string</c>.
            </summary>
            <param name="encryptedText">The encrypted text to decrypt.</param>
            <param name="privateKeyPem">The private RSA key needed for decryption (PEM-formatted <c>string</c>).</param>
            <returns>Decrypted <c>string</c>; <c>null</c> if the passed key or encrypted text argument was <c>null</c> or empty; <c>null</c> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts the specified bytes using the provided RSA public key, which needs to be a PEM-formatted <c>string</c>.
            </summary>
            <param name="data">The data (<c>byte[]</c> array) to encrypt.</param>
            <param name="publicKeyPem">The public key (PEM-formatted <c>string</c>) to use for encryption.</param>
            <returns>The encrypted bytes (<c>System.Byte[]</c>); <c>Array.Empty&lt;byte&gt;()</c> if the passed data or key argument was <c>null</c> or empty; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts the specified bytes using the provided private RSA key (which needs to be a PEM-formatted <c>string</c>).
            </summary>
            <param name="encryptedData">The encrypted data bytes (<c>byte[]</c>).</param>
            <param name="privateKeyPem">The private RSA key to use for decryption (PEM-formatted <c>string</c>).</param>
            <returns>Decrypted bytes (System.Byte[]) if successful; an empty <c>byte[]</c> array if the passed data or key argument was <c>null</c> or empty; <c>null</c> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Sign(System.String,System.String)">
            <summary>
            Signs the specified <c>string</c> using the provided private RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            If the procedure succeeds, the calculated signature <c>string</c> is returned (which is base-64 encoded). Otherwise,
            an empty <c>string</c> is returned if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters
            were <c>null</c> or empty. If the procedure fails entirely, <c>null</c> is returned.
            </summary>
            <param name="data">The data to sign.</param>
            <param name="privateKeyPem">The private RSA key to use for generating the signature (PEM-formatted <c>string</c>)</param>
            <returns>The signature (base-64 encoded <c>string</c>). <c>string.Empty</c> is returned if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters were <c>null</c> or empty. Returns <c>null</c> if signing failed entirely.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Verify(System.String,System.String,System.String)">
            <summary>
            Verifies a signature that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Sign(System.String,System.String)"/> with a public RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            </summary>
            <param name="data">The data whose signature you want to verify.</param>
            <param name="signature">The passed <paramref name="data"/>'s signature (return value of <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Sign(System.String,System.String)"/>).</param>
            <param name="publicKeyPem">The public RSA key (PEM-formatted) to use for signature verification.</param>
            <returns>Whether the data's signature verification succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Sign(System.Byte[],System.String)">
            <summary>
            Signs the specified data <c>byte[]</c> array using the provided private RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            If the procedure succeeds, the calculated signature <c>byte[]</c> array is returned. Otherwise,
            an empty <c>byte[]</c> array is returned if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters
            were <c>null</c> or empty. If the procedure fails entirely, <c>null</c> is returned.
            </summary>
            <param name="data">The data to sign.</param>
            <param name="privateKeyPem">The private RSA key to use for generating the signature (PEM-formatted <c>string</c>)</param>
            <returns>The signature (<c>byte[]</c>), <c>string.Empty</c> if the provided <paramref name="data"/> and/or <paramref name="privateKeyPem"/> parameters were <c>null</c> or empty. Returns <c>null</c> if signing failed entirely.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Verify(System.Byte[],System.Byte[],System.String)">
            <summary>
            Verifies a signature that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Sign(System.Byte[],System.String)"/> with a public RSA key (which needs to be a PEM-formatted <c>string</c>).<para> </para>
            </summary>
            <param name="data">The data whose signature you want to verify.</param>
            <param name="signature">The passed <paramref name="data"/>'s signature (return value of <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA.Sign(System.Byte[],System.String)"/>).</param>
            <param name="publicKeyPem">The public RSA key (PEM-formatted) to use for signature verification.</param>
            <returns>Whether the data's signature verification succeeded or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen">
            <summary>
            Asymmetric crypto key generator.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricKeygen.GenerateKeyPair">
            <summary>
            Generates a new key pair.
            </summary>
            <returns>The keypair <see cref="T:System.Tuple"/>, where the first item is the public RSA key and the second is the private key (both PEM-formatted).</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography">
            <summary>
            Service interface for comfortably encrypting/decrypting epistle messages (usually json strings).
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/>
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.EncryptMessage(System.String,System.String)">
            <summary>
            Encrypts a message json <c>string</c> for a specific recipient,
            whose public encryption RSA key you know (PEM-formatted <c>string</c>).
            </summary>
            <param name="messageJson">The message json (<c>string</c>) to encrypt.</param>
            <param name="recipientPublicRsaKeyPem">The recipient's public RSA key (used for encryption).</param>
            <returns>The encrypted message <c>string</c>; <c>string.Empty</c> if the passed parameters were <c>null</c> or empty; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.DecryptMessage(System.String,System.String)">
            <summary>
            Decrypts a message that's been encrypted using the <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.EncryptMessage(System.String,System.String)"/> method.
            </summary>
            <param name="encryptedMessageJson">The encrypted message <c>string</c> obtained via <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography.EncryptMessage(System.String,System.String)"/>.</param>
            <param name="privateDecryptionRsaKeyPem">Your private message decryption RSA key (PEM-formatted <c>string</c>).</param>
            <returns>The decrypted message json; <c>null</c> if decryption failed in some way; an empty <c>string</c> if the passed arguments were <c>null</c> or empty.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography">
            <summary>
            Service interface implementation for comfortably encrypting/decrypting epistle messages (usually json strings).
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.#ctor(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography,GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA,GlitchedPolygons.Services.CompressionUtility.ICompressionUtility,GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography"/> class.
            </summary>
            <param name="logger"><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger"/> instance for logging any cryptographic errors that might occur.</param>
            <param name="gzip">The <see cref="T:GlitchedPolygons.Services.CompressionUtility.ICompressionUtility"/> instance needed for compression (should be injected via IoC).</param>
            <param name="aes">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography"/> instance (should be injected via IoC).</param>
            <param name="rsa">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/> instance (should be injected via IoC).</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.EncryptMessage(System.String,System.String)">
            <summary>
            Encrypts a message json <c>string</c> for a specific recipient,
            whose public encryption RSA key you know (PEM-formatted <c>string</c>).
            </summary>
            <param name="messageJson">The message json (<c>string</c>) to encrypt.</param>
            <param name="recipientPublicRsaKeyPem">The recipient's public RSA key (used for encryption).</param>
            <returns>The encrypted message <c>string</c>; <c>string.Empty</c> if the passed parameters were <c>null</c> or empty; <c>null</c> if encryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.DecryptMessage(System.String,System.String)">
            <summary>
            Decrypts a message that's been encrypted using the <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.EncryptMessage(System.String,System.String)"/> method.
            </summary>
            <param name="encryptedMessage">The encrypted message <c>string</c> obtained via <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.MessageCryptography.EncryptMessage(System.String,System.String)"/>.</param>
            <param name="privateDecryptionRsaKeyPem">Your private message decryption RSA key (PEM-formatted <c>string</c>).</param>
            <returns>The decrypted message json; <c>null</c> if decryption failed in some way; an empty <c>string</c> if the passed arguments were <c>null</c> or empty.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult">
            <summary>
            The result of encrypting some data using the <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])"/> method.
            Contains the encrypted bytes and the key + initialization vector used for the encryption (you need those for decryption).
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.IV">
            <summary>
            The initialization vector.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.Key">
            <summary>
            The encryption key.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.EncryptedData">
            <summary>
            The encrypted data bytes.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.Dispose">
            <summary>
            Overwrites the <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.Key"/> and <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.IV"/> bytes with zeros.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.IsEmpty">
            <summary>
            Checks whether this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> instance is empty (all its fields <c>null</c>) or not.
            </summary>
            <returns>Whether this <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> instance is empty (all its fields <c>null</c>) or not.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.Empty">
            <summary>
            Gets a new empty <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> instance.
            </summary>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography">
            <summary>
            Service interface for symmetrically encrypting/decrypting data (raw <c>byte[]</c> arrays).<para> </para>
            Please keep in mind that the data you encrypt with <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/> can only be decrypted using the same password and the corresponding mirror method <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)"/>.<para> </para>
            Likewise, data encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])"/> can only be decrypted again using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)"/> respectively.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data using a randomly generated key and initialization vector.<para> </para>
            Returns an <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> containing the encrypted <c>byte[]</c> array + the used encryption key and iv.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> containing the encrypted <c>byte[]</c> array + the used encryption key and iv.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)">
            <summary>
            Decrypts the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])"/>.
            </summary>
            <param name="encryptionResult">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.Encrypt(System.Byte[])"/>.</param>
            <returns>Decrypted <c>byte[]</c> or <c>null</c> if decryption failed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)">
            <summary>
            Encrypts data using a password.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="password">The password used to derive the AES key.</param>
            <returns>The encrypted data bytes.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)">
            <summary>
            Decrypts data that was encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>.
            </summary>
            <param name="encryptedBytes">The encrypted data.</param>
            <param name="password">The password that was used to encrypt the data.</param>
            <returns>The decrypted <c>byte[]</c> array.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.String,System.String)">
            <summary>
            Encrypts data using a password.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="password">The password used to derive the AES key.</param>
            <returns>The encrypted data.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.DecryptWithPassword(System.String,System.String)">
            <summary>
            Decrypts data that was encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography.EncryptWithPassword(System.String,System.String)"/>.
            </summary>
            <param name="data">The encrypted data.</param>
            <param name="password">The password that was used to encrypt the data.</param>
            <returns>The decrypted data.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography">
            <summary>
            Service interface implementation for symmetrically encrypting/decrypting data (raw <c>byte[]</c> arrays) using <see cref="T:System.Security.Cryptography.AesManaged"/>.<para> </para>
            Please keep in mind that the data you encrypt with <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/> can only be decrypted using the same password and the corresponding mirror method <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)"/>.<para> </para>
            Likewise, data encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])"/> can only be decrypted again using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)"/> respectively.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography" /> <c>interface</c>.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data using a randomly generated key and initialization vector.<para> </para>
            An empty <paramref name="data"/> argument will result in an empty <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> being returned (the <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.EncryptedData"/> and crypto key + iv contained therein will be <c>null</c>).<para> </para>
            Returns an <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> containing the encrypted <c>byte[]</c> array + the used encryption key and iv.
            </summary>
            <param name="data">The data to encrypt.</param>
            <returns><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> containing the encrypted <c>byte[]</c> array + the used encryption key and iv; <c>null</c> if encryption failed; empty <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> with <c>null</c> fields if empty <paramref name="data"/> is passed into the method.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Decrypt(GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult)">
            <summary>
            Decrypts the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])" />.<para> </para>
            Empty or null <paramref name="encryptionResult"/> argument (or the contained <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult.EncryptedData"/> field) results in an empty <c>byte[]</c> array being returned.<para> </para>
            </summary>
            <param name="encryptionResult">The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult" /> that was obtained using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.Encrypt(System.Byte[])" />.</param>
            <returns>Decrypted <c>byte[]</c> array; <c>null</c> if decryption failed; empty <c>byte[]</c> array if empty <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.EncryptionResult"/> argument is passed (with data set to <c>null</c>).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)">
            <summary>
            Encrypts data using a password.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="password">The password used to derive the AES key.</param>
            <returns>The encrypted data <c>byte[]</c> array; empty <c>byte[]</c> array if empty <paramref name="data"/> or <paramref name="password"/> parameters are passed; <c>null</c> if encryption failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)">
            <summary>
            Decrypts data that was encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>.
            </summary>
            <param name="encryptedBytes">The encrypted data that was returned by <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>.</param>
            <param name="password">The password that was used to encrypt the data.</param>
            <returns>The decrypted <c>byte[]</c> array; <c>null</c> if decryption failed; an empty <c>byte[]</c> array if <paramref name="encryptedBytes"/> or <paramref name="password"/> parameters were <c>null</c> or empty.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.String,System.String)">
            <summary>
            Encrypts data using a password.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="password">The password used to derive the AES key.</param>
            <returns>The encrypted data <c>string</c>; an empty <c>string</c> if <paramref name="data"/> or <paramref name="password"/> parameters were <c>null</c> or empty; <c>null</c> is returned if encryption failed in any way.</returns>
            <seealso cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.Byte[],System.String)"/>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.DecryptWithPassword(System.String,System.String)">
            <summary>
            Decrypts data that was encrypted using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.EncryptWithPassword(System.String,System.String)"/>.
            </summary>
            <param name="data">The encrypted data.</param>
            <param name="password">The password that was used to encrypt the data.</param>
            <returns>The decrypted data <c>string</c>; an empty <c>string</c> if <paramref name="data"/> or <paramref name="password"/> parameters were <c>null</c> or empty; <c>null</c> is returned if decryption failed in any way.</returns>
            <seealso cref="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.SymmetricCryptography.DecryptWithPassword(System.Byte[],System.String)"/>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger">
            <summary>
            Service interface for logging messages to their corresponding category's log file.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogMessage(System.String)">
            <summary>
            Logs an innocent message.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogWarning(System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="msg">The warning.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger.LogError(System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="msg">The error.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger">
            <summary>
            <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.ILogger"/> implementation that keeps its logs stored in memory. Excellent for unit testing purposes.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger.GetMessages">
            <summary>
            Gets a copy of the currently logged messages.
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.ICollection`1"/> that is a copy of the currently logged messages.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger.GetWarnings">
            <summary>
            Gets a copy of the currently logged warnings.
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.ICollection`1"/> that is a copy of the currently logged warnings.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger.GetErrors">
            <summary>
            Gets a copy of the currently logged errors.
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.ICollection`1"/> that is a copy of the currently logged errors.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger.LogMessage(System.String)">
            <summary>
            Logs an innocent message.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger.LogWarning(System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="msg">The warning.</param>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Logging.InMemoryLogger.LogError(System.String)">
            <summary>
            Logs an error.
            </summary>
            <param name="msg">The error.</param>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest">
            <summary>
            Service interface for testing the connection to the epistle server.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest.TestConnection">
            <summary>
            Tests the connection to the epistle server.<para> </para>
            Returns <c>true</c> if the connection could be established or <c>false</c> if the server did not respond.
            </summary>
            <returns>Whether the connection to the epistle server could be established successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.ServerConnectionTest">
            <summary>
            Class for testing the connection to the epistle server.
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest" /> interface.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.IServerConnectionTest" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.ServerHealth.ServerConnectionTest.TestConnection">
            <summary>
            Tests the connection to the epistle server.<para> </para>
            Returns <c>true</c> if the connection could be established or <c>false</c> if the server did not respond.
            </summary>
            <returns>Whether the connection to the epistle server could be established successfully or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings">
            <summary>
            Service interface for accessing, saving and loading user settings.
            </summary>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String)">
            <summary>
            Gets or sets a user setting with its specified key <c>string</c>.<para> </para>
            If you are trying to get an inexistent setting, <c>null</c> (or <c>string.Empty</c>) should be returned.<para> </para>
            If you are trying to set an inexistent setting, the setting shall be created.
            </summary>
            <param name="key">The setting's name/key.</param>
            <returns>The setting's <c>string</c> value; <c>null</c> (or <c>string.Empty</c>) if the setting doesn't exist.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.String)">
            <summary>
            Gets a user setting by its key <c>string</c>.
            </summary>
            <param name="key">The setting's name/key.</param>
            <param name="defaultValue">The setting's default <c>string</c> value (in case the setting doesn't exist).</param>
            <returns>The setting's <c>string</c> value; the specified default value if the setting wasn't found.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Int32)">
            <summary>
            Gets a user setting parsed as an <c>int</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>int</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>int</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Boolean)">
            <summary>
            Gets a user setting parsed as a <c>bool</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>bool</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>bool</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Single)">
            <summary>
            Gets a user setting parsed as a <c>float</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>float</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>float</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="P:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Item(System.String,System.Double)">
            <summary>
            Gets a user setting parsed as a <c>double</c>.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The setting's default <c>double</c> value to return in case the setting doesn't exist or couldn't be parsed.</param>
            <returns>The setting's <c>double</c> value; or the specified default value if the setting wasn't found or couldn't be parsed.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Save">
            <summary>
            Saves the current user settings out to disk.
            </summary>
            <returns>Whether the settings were saved out to disk successfully or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings.Load">
            <summary>
            Loads user settings from disk into the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Settings.ISettings"/> instance.
            </summary>
            <returns>Whether the loading procedure was successful or not.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService">
            <summary>
            Service interface for logging into Glitched Epistle
            and receiving an auth token back from the Web API,
            as well as extending a user's expiration date.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.Login(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto)">
            <summary>
            Logs the specified user in by authenticating the provided credentials with a POST request to the Glitched Epistle Web API.
            If authentication is successful, a valid authentication token <c>string</c> is returned along with the user's keypair.
            That's needed for subsequent requests.
            </summary>
            <param name="paramsDto">HTTP Request parameters wrapped into a DTO instance.</param>
            <returns><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto"/> if auth was successful; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.RefreshAuthToken(System.String,System.String)">
            <summary>
            Refreshes the authentication token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The current authentication token.</param>
            <returns>If all goes well, you should receive your new, fresh auth token from the backend.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.Validate2FA(System.String,System.String)">
            <summary>
            Validates the 2fa token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="totp">The totp.</param>
            <returns>Whether the user 2FA authentication succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserExpirationUTC(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s expiration <see cref="T:System.DateTime"/> (in UTC).
            </summary>
            <param name="userId">The user id.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>'s expiration <see cref="T:System.DateTime"/> in UTC; <c>null</c> if the user doesn't exist.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetConvos(System.String,System.String)">
            <summary>
            Gets the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s in which the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> is involved (participant or creator thereof).
            </summary>
            <param name="userId">The user id.</param>
            <param name="auth">Request authentication token.</param>
            <returns>The found convos.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserPublicKey(System.String,System.String,System.String)">
            <summary>
            Gets one or more users' public key (RSA key needed for encrypting messages for that user).
            </summary>
            <param name="userId">Your user identifier.</param>
            <param name="userIds">The user ids whose public key you want to retrieve (comma-separated).</param>
            <param name="auth">The request authentication token.</param>
            <returns><c>List&lt;Tuple&lt;string, string&gt;&gt;</c> containing all of the user ids and their public key; <c>null</c> if the request failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.GetUserPrivateKey(System.String,System.String,System.String)">
            <summary>
            Gets a user's (encrypted, gzipped and base-64 encoded) private key from the server.
            </summary>
            <param name="userId">The requesting user's id.</param>
            <param name="passwordSHA512">The requesting user's password hash (SHA512).</param>
            <param name="totp">Two-Factor Authentication token.</param>
            <returns><c>null</c> if retrieval failed; the key if the request was successful.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.ChangeUserPassword(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto)">
            <summary>
            Changes the user password.
            </summary>
            <param name="paramsDto">Request parameters DTO.</param>
            <returns><c>bool</c> indicating whether the change was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService.CreateUser(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto)">
            <summary>
            Creates a new user.
            </summary>
            <param name="userCreationRequestDto">DTO containing user creation parameters (for the request body).</param>
            <returns>The user creation response data containing the TOTP secret to show only ONCE to the user (won't be stored)... or <c>null</c> if the creation failed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService">
            <summary>
            Service interface for logging into Glitched Epistle and receiving an auth token back from the Web API, as well as extending a user's expiration date.<para> </para>
            Implements the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService" /> interface.
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService" />
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.Login(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginRequestDto)">
            <summary>
            Logs the specified user in by authenticating the provided credentials
            (POST request to the Glitched Epistle Web API).
            If authentication is successful, a valid JWT <c>string</c> is returned along with the user's keypair.
            That's needed for subsequent requests.
            </summary>
            <param name="paramsDto">HTTP Request parameters wrapped into a DTO instance.</param>
            <returns><see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserLoginSuccessResponseDto"/> if auth was successful; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.RefreshAuthToken(System.String,System.String)">
            <summary>
            Refreshes the authentication token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="auth">The current authentication token.</param>
            <returns>If all goes well, you should receive your new, fresh auth token from the backend.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.Validate2FA(System.String,System.String)">
            <summary>
            Validates the 2fa token.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="totp">The totp.</param>
            <returns>Whether the user 2FA authentication succeeded or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetConvos(System.String,System.String)">
            <summary>
            Gets the <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.Convo"/>s in which the specified <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/> is involved (participant or creator thereof).
            </summary>
            <param name="userId">The user id.</param>
            <param name="auth">Request authentication token.</param>
            <returns>The found convos.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserExpirationUTC(System.String)">
            <summary>
            Gets a <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User" />'s expiration <see cref="T:System.DateTime" /> (in UTC).
            </summary>
            <param name="userId">The user id.</param>
            <returns>The <see cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User" />'s expiration <see cref="T:System.DateTime" /> in UTC; <c>null</c> if the user doesn't exist.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserPublicKey(System.String,System.String,System.String)">
            <summary>
            Gets one or more users' public key (RSA key needed for encrypting messages for that user).
            </summary>
            <param name="userId">Your user identifier.</param>
            <param name="userIds">The user ids whose public key you want to retrieve (comma-separated).</param>
            <param name="auth">The request authentication token.</param>
            <returns><c>List&lt;Tuple&lt;string, string&gt;&gt;</c> containing all of the user ids and their public key; <c>null</c> if the request failed in some way.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.GetUserPrivateKey(System.String,System.String,System.String)">
            <summary>
            Gets a user's (encrypted, gzipped and base-64 encoded) private key from the server.
            </summary>
            <param name="userId">The requesting user's id.</param>
            <param name="passwordSHA512">The requesting user's password hash (SHA512).</param>
            <param name="totp">Two-Factor Authentication token.</param>
            <returns><c>null</c> if retrieval failed; the key if the request was successful.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.ChangeUserPassword(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserChangePasswordRequestDto)">
            <summary>
            Changes the user password.
            </summary>
            <param name="paramsDto">Request parameters DTO.</param>
            <returns><c>bool</c> indicating whether the change was successful or not.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.UserService.CreateUser(GlitchedPolygons.GlitchedEpistle.Client.Models.DTOs.UserCreationRequestDto)">
            <summary>
            Creates a new user.
            </summary>
            <param name="userCreationRequestDto">DTO containing user creation parameters (for the request body).</param>
            <returns>The user creation response data containing the TOTP secret to show only ONCE to the user (won't be stored)... or <c>null</c> if the creation failed.</returns>
        </member>
        <member name="T:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility">
            <summary>
            This key utility was extracted first of all, obviously,
            to avoid code duplication and provide a single point of exchange where API consumers can prepare user RSA keys
            for submission to the backend and, conversely, deserialize them back into the client's domain model easily.<para> </para>
            Secondly, it's also some sort of code entry point for whoever wants to verify Epistle's safety:
            you can Shift-F12/navigate into the various message exchange/encryption relevant implementations
            from here and convince yourself whether this product is for you or not, by reading the source code.
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility.EncryptAndCompressPrivateKey(System.String,System.String)">
            <summary>
            Encrypts <paramref name="privateKeyPem"/> into a portable <c>string</c>
            that is safe to exchange with the backend, AS LONG AS THE USER'S PASSWORD IS NOT COMPROMISED.<para> </para>
            THE SERVER NEVER HAS YOUR PRIVATE KEY IN PLAIN TEXT!<para> </para>
            The private key is encrypted using the user's password, NOT ITS HASH!
            Otherwise the server could decrypt the key, because it does have the user's <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PasswordSHA512"/>.<para> </para>
            Because of this, it is highly advisable to change user passwords often and use an offline, open-source password manager (such as KeePass).
            </summary>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Models.User"/>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Symmetric.ISymmetricCryptography"/>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Asymmetric.IAsymmetricCryptographyRSA"/>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Cryptography.Messages.IMessageCryptography"/>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Users.IUserService"/>
            <seealso cref="T:GlitchedPolygons.GlitchedEpistle.Client.Services.Convos.IConvoService"/>
            <param name="privateKeyPem">The user's private RSA key (PEM-formatted <c>string</c>).</param>
            <param name="userPassword">The user's password (NOT its SHA512!).</param>
            <returns><c>string</c> that contains the encrypted and compressed <paramref name="privateKeyPem"/>.</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility.DecompressAndDecryptPrivateKey(System.String,System.String)">
            <summary>
            Decompresses and decrypts a private RSA key 
            that was encrypted and compressed using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility.EncryptAndCompressPrivateKey(System.String,System.String)"/>,
            ready to be assigned to <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PrivateKeyPem"/>.
            </summary>
            <param name="encryptedCompressedKey">The encrypted and compressed private key that you'd get from/to the backend (THE SERVER NEVER HAS YOUR PRIVATE KEY IN PLAIN TEXT).</param>
            <param name="userPassword">The user's password (NOT the hash).</param>
            <returns>The raw PEM-formatted private RSA Key (ready to be assigned to <see cref="P:GlitchedPolygons.GlitchedEpistle.Client.Models.User.PrivateKeyPem"/>).</returns>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility.CompressPublicKey(System.String)">
            <summary>
            Returns the gzipped, base-64 encoded <paramref name="publicKeyPem"/>... ready to be exchanged with the backend.
            <param name="publicKeyPem">The public RSA key (PEM-formatted) to compress.</param>
            </summary>
        </member>
        <member name="M:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility.DecompressPublicKey(System.String)">
            <summary>
            Decompresses the <paramref name="compressedPublicKeyPem"/> that is
            coming from a backend request's response and was initially compressed using <see cref="M:GlitchedPolygons.GlitchedEpistle.Client.Utilities.KeyExchangeUtility.CompressPublicKey(System.String)"/>.
            </summary>
            <param name="compressedPublicKeyPem">The compressed public key pem <c>string</c>.</param>
            <returns>The decompressed <paramref name="compressedPublicKeyPem"/>.</returns>
        </member>
    </members>
</doc>
